import pygame
import sys
import random
import os
from pygame.locals import *

# 色の定義
WHITE = (255, 255, 255)
BLACK = (  0,   0,   0)
RED   = (255,   0,   0)
ORANGE= (238, 120,   0)
BLUE  = (  0,   0, 255)
CYAN  = (  0, 255, 255)
BLINK = [(224,255,255), (192,240,255), (128,224,255), \
         (64,192,255), (128,224,255), (192,240,255)]

# 画像の読み込み
imgTitle = pygame.image.load("image/background/title.png")
imgStory = pygame.image.load("image/background/story.png")
imgField = pygame.image.load("image/background/background.png")
imgBtlBG = pygame.image.load("image/background/battle.png")
imgMenu = pygame.image.load("image/background/menu.png")
imgEnding = pygame.image.load("image/background/ending.png")
imgEnemy = pygame.image.load("image/enemy/enemy0.png")
imgEffect = pygame.image.load("image/effect/effect.png")
imgRecovery = pygame.image.load("image/effect/recovery.png")
imgItem = pygame.image.load("image/item/attack_item0.png")
imgPlayer = [
    pygame.image.load("image/player/player0.png"),
    pygame.image.load("image/player/player1.png"),
    pygame.image.load("image/player/player2.png"),
    pygame.image.load("image/player/player3.png"),
    pygame.image.load("image/player/player4.png"),
    pygame.image.load("image/player/player5.png"),
    pygame.image.load("image/player/player6.png"),
    pygame.image.load("image/player/player7.png"),
    pygame.image.load("image/player/player8.png"),
    pygame.image.load("image/player/player9.png"),
    pygame.image.load("image/player/player10.png"),
    pygame.image.load("image/player/player11.png"),
    pygame.image.load("image/player/player12.png"),
    pygame.image.load("image/player/player13.png"),
    pygame.image.load("image/player/player14.png"),
    pygame.image.load("image/player/player15.png"),
    pygame.image.load("image/player/player16.png")
]

# 変数の宣言
speed = 1
volume = 1
idx = 0
tmr = 0
field_tmr = 0
title_cmd = 0
pl_turn = 0
emy_turn = 0
item_get = 0
recovery_time = 0

pl_x = 0
pl_y = 0
pl_xs = 0
pl_ys = 0
pl_d = 0
pl_a = 0
pl_x_tmp = 0
pl_y_tmp = 0
pl_d_tmp = 0
pl_a_tmp = 0
pl_x_map_tmp = 0
pl_y_map_tmp = 0
pl_lifemax = 0
pl_life = 0
pl_str = 0
pl_movmax = 0
pl_mov = 0
pl_step = 0
btl_cmd = 6

emy_name = ""
emy_lifemax = 0
emy_life = 0
emy_str = 0
emy_movmax = 0
emy_mov = 0
emy_x = 0
emy_y = 0
emy_xs = 0
emy_ys = 0
emy_recovery = 0
emy_step = 0
emy_exist = 1

pl_blink = 0
emy_blink = 0
dmg_eff = 0

attack_item = 0
attack_item_list = [0, 0, 0, 0, 0]
item_cmd = 0
item_x = 0
item_y = 0
item_str = 0

recovery_item = 3
item_choice_cmd = 0

stage = 1

data_choice = 0
continue_data = 0
save_cmd = 0
save_data = 0
rec = 0

title_choice = 0
titleback_cmd = 1

COMMAND = ["[C]クリア", "[A]攻撃", "[I]アイテム", "[W]待機"]
COMMAND_ITEM = ["[1]爆弾1", "[2]爆弾2", "[3]爆弾3", "[4]爆弾4", "[5]爆弾5"]
COMMAND_ITEM_CHOICE = ["[R]回復", "[A]爆弾"]
COMMAND_DATA = ["[1]セーブデータ1", "[2]セーブデータ2", "[3]セーブデータ3"]
COMMAND_TITLE = ["[F]始めから", "[C]続きから"]
COMMAND_TITLEBACK = ["[Y]はい", "[N]いいえ"]

stage_data = [0, 0, 0]

maze = [
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 2, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
]

map_move = [
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 11, 11, 11, 11, 9, 9, 9, 11, 11, 11, 11, 11, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 11, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
]

story_sentence = [
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんは", "ひろきくんは東", "ひろきくんは東大", "ひろきくんは東大を", "ひろきくんは東大を目", "ひろきくんは東大を目指", "ひろきくんは東大を目指し", "ひろきくんは東大を目指して", "ひろきくんは東大を目指して、", "ひろきくんは東大を目指して、", "ひろきくんは東大を目指して、", "ひろきくんは東大を目指して、", "ひろきくんは東大を目指して、"],
    ["毎", "毎日", "毎日学", "毎日学校", "毎日学校に", "毎日学校に通", "毎日学校に通っ", "毎日学校に通って", "毎日学校に通ってい", "毎日学校に通っていた", "毎日学校に通っていた。", "毎日学校に通っていた。", "毎日学校に通っていた。", "毎日学校に通っていた。", "毎日学校に通っていた。", "毎日学校に通っていた。", "毎日学校に通っていた。", "毎日学校に通っていた。"],
    ["し", "しか", "しかし", "しかし、", "しかし、洞", "しかし、洞窟", "しかし、洞窟か", "しかし、洞窟から", "しかし、洞窟から凶", "しかし、洞窟から凶暴", "しかし、洞窟から凶暴な", "しかし、洞窟から凶暴な動", "しかし、洞窟から凶暴な動物", "しかし、洞窟から凶暴な動物が", "しかし、洞窟から凶暴な動物が出", "しかし、洞窟から凶暴な動物が出る", "しかし、洞窟から凶暴な動物が出ると", "しかし、洞窟から凶暴な動物が出るとの"],
    ["噂", "噂が", "噂が流", "噂が流れ", "噂が流れて", "噂が流れてき", "噂が流れてきた", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。", "噂が流れてきた。"],
    ["念", "念の", "念の為", "念の為、", "念の為、ひ", "念の為、ひろ", "念の為、ひろき", "念の為、ひろきく", "念の為、ひろきくん", "念の為、ひろきくんは", "念の為、ひろきくんは戦", "念の為、ひろきくんは戦闘", "念の為、ひろきくんは戦闘準", "念の為、ひろきくんは戦闘準備", "念の為、ひろきくんは戦闘準備を", "念の為、ひろきくんは戦闘準備をし", "念の為、ひろきくんは戦闘準備をした", "念の為、ひろきくんは戦闘準備をした。"],
    ["そ", "そし", "そして", "そしてあ", "そしてある", "そしてある日", "そしてある日、", "そしてある日、ひ", "そしてある日、ひろ", "そしてある日、ひろき", "そしてある日、ひろきく", "そしてある日、ひろきくん", "そしてある日、ひろきくんは", "そしてある日、ひろきくんはつ", "そしてある日、ひろきくんはつい", "そしてある日、ひろきくんはついに", "そしてある日、ひろきくんはついに", "そしてある日、ひろきくんはついに"],
    ["凶", "凶暴", "凶暴な", "凶暴な猫", "凶暴な猫に", "凶暴な猫に遭", "凶暴な猫に遭遇", "凶暴な猫に遭遇し", "凶暴な猫に遭遇した", "凶暴な猫に遭遇した。", "凶暴な猫に遭遇した。。", "凶暴な猫に遭遇した。。。", "凶暴な猫に遭遇した。。。", "凶暴な猫に遭遇した。。。", "凶暴な猫に遭遇した。。。", "凶暴な猫に遭遇した。。。", "凶暴な猫に遭遇した。。。", "凶暴な猫に遭遇した。。。"]
]

story_sentence2 = [
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんは", "ひろきくんはな", "ひろきくんはなん", "ひろきくんはなんと", "ひろきくんはなんとか", "ひろきくんはなんとか凶", "ひろきくんはなんとか凶暴", "ひろきくんはなんとか凶暴な", "ひろきくんはなんとか凶暴な猫", "ひろきくんはなんとか凶暴な猫を", "ひろきくんはなんとか凶暴な猫を", "ひろきくんはなんとか凶暴な猫を", "ひろきくんはなんとか凶暴な猫を"],
    ["退", "退治", "退治す", "退治する", "退治するこ", "退治すること", "退治することが", "退治することがで", "退治することができ", "退治することができた", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。"],
    ["し", "しか", "しかし", "しかし、", "しかし、凶", "しかし、凶暴", "しかし、凶暴な", "しかし、凶暴な猫", "しかし、凶暴な猫は", "しかし、凶暴な猫は姿", "しかし、凶暴な猫は姿を", "しかし、凶暴な猫は姿を消", "しかし、凶暴な猫は姿を消す", "しかし、凶暴な猫は姿を消すど", "しかし、凶暴な猫は姿を消すどこ", "しかし、凶暴な猫は姿を消すどころ", "しかし、凶暴な猫は姿を消すどころか", "しかし、凶暴な猫は姿を消すどころか"],
    ["更", "更に", "更に強", "更に強力", "更に強力な", "更に強力な猫", "更に強力な猫が", "更に強力な猫が出", "更に強力な猫が出る", "更に強力な猫が出ると", "更に強力な猫が出るとの", "更に強力な猫が出るとの噂", "更に強力な猫が出るとの噂だ", "更に強力な猫が出るとの噂だ。", "更に強力な猫が出るとの噂だ。", "更に強力な猫が出るとの噂だ。", "更に強力な猫が出るとの噂だ。", "更に強力な猫が出るとの噂だ。"],
    ["道", "道端", "道端で", "道端で拾", "道端で拾っ", "道端で拾った", "道端で拾った爆", "道端で拾った爆弾", "道端で拾った爆弾が", "道端で拾った爆弾が役", "道端で拾った爆弾が役に", "道端で拾った爆弾が役に立", "道端で拾った爆弾が役に立つ", "道端で拾った爆弾が役に立つこ", "道端で拾った爆弾が役に立つこと", "道端で拾った爆弾が役に立つことは", "道端で拾った爆弾が役に立つことは", "道端で拾った爆弾が役に立つことは"],
    ["ほ", "ほぼ", "ほぼ間", "ほぼ間違", "ほぼ間違い", "ほぼ間違いが", "ほぼ間違いがな", "ほぼ間違いがなさ", "ほぼ間違いがなさそ", "ほぼ間違いがなさそう", "ほぼ間違いがなさそうだ", "ほぼ間違いがなさそうだ。", "ほぼ間違いがなさそうだ。", "ほぼ間違いがなさそうだ。", "ほぼ間違いがなさそうだ。", "ほぼ間違いがなさそうだ。", "ほぼ間違いがなさそうだ。", "ほぼ間違いがなさそうだ。"],
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんは", "ひろきくんはそ", "ひろきくんはそう", "ひろきくんはそう思", "ひろきくんはそう思い", "ひろきくんはそう思いな", "ひろきくんはそう思いなが", "ひろきくんはそう思いながら", "ひろきくんはそう思いながら", "ひろきくんはそう思いながら", "ひろきくんはそう思いながら", "ひろきくんはそう思いながら", "ひろきくんはそう思いながら"],
    ["更", "更な", "更なる", "更なる試", "更なる試練", "更なる試練の", "更なる試練の前", "更なる試練の前に", "更なる試練の前に挑", "更なる試練の前に挑も", "更なる試練の前に挑もう", "更なる試練の前に挑もうと", "更なる試練の前に挑もうとし", "更なる試練の前に挑もうとして", "更なる試練の前に挑もうとしてい", "更なる試練の前に挑もうとしていた", "更なる試練の前に挑もうとしていた。", "更なる試練の前に挑もうとしていた。"]
]

story_sentence3 = [
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんは", "ひろきくんはほ", "ひろきくんはほぼ", "ひろきくんはほぼ互", "ひろきくんはほぼ互角", "ひろきくんはほぼ互角レ", "ひろきくんはほぼ互角レベ", "ひろきくんはほぼ互角レベル", "ひろきくんはほぼ互角レベルの", "ひろきくんはほぼ互角レベルの猫", "ひろきくんはほぼ互角レベルの猫を", "ひろきくんはほぼ互角レベルの猫を", "ひろきくんはほぼ互角レベルの猫を"],
    ["退", "退治", "退治す", "退治する", "退治するこ", "退治すること", "退治することが", "退治することがで", "退治することができ", "退治することができた", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。", "退治することができた。"],
    ["今", "今後", "今後更", "今後更に", "今後更に強", "今後更に強力", "今後更に強力な", "今後更に強力な猫", "今後更に強力な猫が", "今後更に強力な猫が出", "今後更に強力な猫が出る", "今後更に強力な猫が出ると", "今後更に強力な猫が出るとの", "今後更に強力な猫が出るとの噂", "今後更に強力な猫が出るとの噂だ", "今後更に強力な猫が出るとの噂だ。", "今後更に強力な猫が出るとの噂だ。", "今後更に強力な猫が出るとの噂だ。"],
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんの", "ひろきくんの素", "ひろきくんの素の", "ひろきくんの素の強", "ひろきくんの素の強さ", "ひろきくんの素の強さで", "ひろきくんの素の強さでは", "ひろきくんの素の強さでは", "ひろきくんの素の強さでは", "ひろきくんの素の強さでは", "ひろきくんの素の強さでは", "ひろきくんの素の強さでは", "ひろきくんの素の強さでは"],
    ["と", "とて", "とても", "とてもじ", "とてもじゃ", "とてもじゃな", "とてもじゃない", "とてもじゃないけ", "とてもじゃないけど", "とてもじゃないけど太", "とてもじゃないけど太刀", "とてもじゃないけど太刀打", "とてもじゃないけど太刀打ち", "とてもじゃないけど太刀打ちで", "とてもじゃないけど太刀打ちでき", "とてもじゃないけど太刀打ちできな", "とてもじゃないけど太刀打ちできない", "とてもじゃないけど太刀打ちできない。"],
    ["爆", "爆弾", "爆弾だ", "爆弾だけ", "爆弾だけで", "爆弾だけでな", "爆弾だけでなく", "爆弾だけでなく回", "爆弾だけでなく回復", "爆弾だけでなく回復も", "爆弾だけでなく回復も必", "爆弾だけでなく回復も必要", "爆弾だけでなく回復も必要な", "爆弾だけでなく回復も必要なこ", "爆弾だけでなく回復も必要なこと", "爆弾だけでなく回復も必要なことが", "爆弾だけでなく回復も必要なことが", "爆弾だけでなく回復も必要なことが"],
    ["目", "目に", "目に見", "目に見え", "目に見えて", "目に見えてき", "目に見えてきた", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。", "目に見えてきた。"],
    ["更", "更に", "更に悪", "更に悪い", "更に悪い噂", "更に悪い噂が", "更に悪い噂が流", "更に悪い噂が流れ", "更に悪い噂が流れて", "更に悪い噂が流れてき", "更に悪い噂が流れてきた", "更に悪い噂が流れてきた。", "更に悪い噂が流れてきた。", "更に悪い噂が流れてきた。", "更に悪い噂が流れてきた。", "更に悪い噂が流れてきた。", "更に悪い噂が流れてきた。", "更に悪い噂が流れてきた。"],
    ["昨", "昨日", "昨日ま", "昨日まで", "昨日まで通", "昨日まで通れ", "昨日まで通れた", "昨日まで通れた道", "昨日まで通れた道が", "昨日まで通れた道が", "昨日まで通れた道が", "昨日まで通れた道が", "昨日まで通れた道が", "昨日まで通れた道が", "昨日まで通れた道が", "昨日まで通れた道が", "昨日まで通れた道が", "昨日まで通れた道が"],
    ["通", "通れ", "通れな", "通れなく", "通れなくな", "通れなくなる", "通れなくなる部", "通れなくなる部分", "通れなくなる部分が", "通れなくなる部分が出", "通れなくなる部分が出た", "通れなくなる部分が出たそ", "通れなくなる部分が出たそう", "通れなくなる部分が出たそうだ", "通れなくなる部分が出たそうだ。", "通れなくなる部分が出たそうだ。", "通れなくなる部分が出たそうだ。", "通れなくなる部分が出たそうだ。"],
    ["そ", "そし", "そして", "そして、", "そして、目", "そして、目に", "そして、目に見", "そして、目に見え", "そして、目に見える", "そして、目に見えるも", "そして、目に見えるもの", "そして、目に見えるものだ", "そして、目に見えるものだけ", "そして、目に見えるものだけが", "そして、目に見えるものだけが", "そして、目に見えるものだけが", "そして、目に見えるものだけが", "そして、目に見えるものだけが"],
    ["真", "真実", "真実と", "真実とは", "真実とは限", "真実とは限ら", "真実とは限らな", "真実とは限らない", "真実とは限らないと", "真実とは限らないと巷", "真実とは限らないと巷で", "真実とは限らないと巷で広", "真実とは限らないと巷で広が", "真実とは限らないと巷で広がっ", "真実とは限らないと巷で広がって", "真実とは限らないと巷で広がってい", "真実とは限らないと巷で広がっていた", "真実とは限らないと巷で広がっていた。"]
]

story_sentence4 = [
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんは", "ひろきくんは格", "ひろきくんは格上", "ひろきくんは格上の", "ひろきくんは格上の猫", "ひろきくんは格上の猫を", "ひろきくんは格上の猫を", "ひろきくんは格上の猫を", "ひろきくんは格上の猫を", "ひろきくんは格上の猫を", "ひろきくんは格上の猫を", "ひろきくんは格上の猫を", "ひろきくんは格上の猫を"],
    ["知", "知恵", "知恵を", "知恵を用", "知恵を用い", "知恵を用いて", "知恵を用いて退", "知恵を用いて退治", "知恵を用いて退治す", "知恵を用いて退治する", "知恵を用いて退治するこ", "知恵を用いて退治すること", "知恵を用いて退治することが", "知恵を用いて退治することがで", "知恵を用いて退治することができ", "知恵を用いて退治することができた", "知恵を用いて退治することができた。", "知恵を用いて退治することができた。"],
    ["ま", "まだ", "まだま", "まだまだ", "まだまだ猫", "まだまだ猫の", "まだまだ猫の勢", "まだまだ猫の勢い", "まだまだ猫の勢いは", "まだまだ猫の勢いは止", "まだまだ猫の勢いは止ま", "まだまだ猫の勢いは止まら", "まだまだ猫の勢いは止まらな", "まだまだ猫の勢いは止まらない", "まだまだ猫の勢いは止まらない。", "まだまだ猫の勢いは止まらない。", "まだまだ猫の勢いは止まらない。", "まだまだ猫の勢いは止まらない。"],
    ["ま", "また", "またも", "またもや", "またもや通", "またもや通れ", "またもや通れる", "またもや通れる道", "またもや通れる道が", "またもや通れる道が変", "またもや通れる道が変わ", "またもや通れる道が変わっ", "またもや通れる道が変わった", "またもや通れる道が変わったよ", "またもや通れる道が変わったよう", "またもや通れる道が変わったようだ", "またもや通れる道が変わったようだ。", "またもや通れる道が変わったようだ。"],
    ["戦", "戦術", "戦術を", "戦術を臨", "戦術を臨機", "戦術を臨機応", "戦術を臨機応変", "戦術を臨機応変に", "戦術を臨機応変に変", "戦術を臨機応変に変え", "戦術を臨機応変に変えて", "戦術を臨機応変に変えてい", "戦術を臨機応変に変えていか", "戦術を臨機応変に変えていかな", "戦術を臨機応変に変えていかなく", "戦術を臨機応変に変えていかなくて", "戦術を臨機応変に変えていかなくては", "戦術を臨機応変に変えていかなくては"],
    ["こ", "この", "この状", "この状況", "この状況を", "この状況を脱", "この状況を脱出", "この状況を脱出す", "この状況を脱出する", "この状況を脱出するこ", "この状況を脱出すること", "この状況を脱出することは", "この状況を脱出することはで", "この状況を脱出することはでき", "この状況を脱出することはできな", "この状況を脱出することはできない", "この状況を脱出することはできない。", "この状況を脱出することはできない。"],
    ["し", "しか", "しかし", "しかし、", "しかし、ひ", "しかし、ひろ", "しかし、ひろき", "しかし、ひろきく", "しかし、ひろきくん", "しかし、ひろきくんは", "しかし、ひろきくんは", "しかし、ひろきくんは", "しかし、ひろきくんは", "しかし、ひろきくんは", "しかし、ひろきくんは", "しかし、ひろきくんは", "しかし、ひろきくんは", "しかし、ひろきくんは"],
    ["あ", "あき", "あきら", "あきらめ", "あきらめて", "あきらめてい", "あきらめていな", "あきらめていなか", "あきらめていなかっ", "あきらめていなかった", "あきらめていなかった。", "あきらめていなかった。", "あきらめていなかった。", "あきらめていなかった。", "あきらめていなかった。", "あきらめていなかった。", "あきらめていなかった。", "あきらめていなかった。"],
    ["必", "必ず", "必ず東", "必ず東大", "必ず東大に", "必ず東大に合", "必ず東大に合格", "必ず東大に合格す", "必ず東大に合格する", "必ず東大に合格するた", "必ず東大に合格するため", "必ず東大に合格するために", "必ず東大に合格するために", "必ず東大に合格するために", "必ず東大に合格するために", "必ず東大に合格するために", "必ず東大に合格するために", "必ず東大に合格するために"],
    ["学", "学校", "学校に", "学校には", "学校には通", "学校には通う", "学校には通うと", "学校には通うとい", "学校には通うという", "学校には通うというこ", "学校には通うということ", "学校には通うということを", "学校には通うということを", "学校には通うということを", "学校には通うということを", "学校には通うということを", "学校には通うということを", "学校には通うということを"],
    ["強", "強く", "強く心", "強く心に", "強く心に誓", "強く心に誓っ", "強く心に誓って", "強く心に誓ってい", "強く心に誓っていた", "強く心に誓っていた。", "強く心に誓っていた。", "強く心に誓っていた。", "強く心に誓っていた。", "強く心に誓っていた。", "強く心に誓っていた。", "強く心に誓っていた。", "強く心に誓っていた。", "強く心に誓っていた。"]
]

story_sentence5 = [
    ["無", "無慈", "無慈悲", "無慈悲に", "無慈悲にも", "無慈悲にも強", "無慈悲にも強く", "無慈悲にも強くな", "無慈悲にも強くなり", "無慈悲にも強くなりつ", "無慈悲にも強くなりつつ", "無慈悲にも強くなりつつあ", "無慈悲にも強くなりつつある", "無慈悲にも強くなりつつある猫", "無慈悲にも強くなりつつある猫が", "無慈悲にも強くなりつつある猫が", "無慈悲にも強くなりつつある猫が", "無慈悲にも強くなりつつある猫が"],
    ["町", "町中", "町中を", "町中を襲", "町中を襲う", "町中を襲うこ", "町中を襲うこと", "町中を襲うことを", "町中を襲うことを止", "町中を襲うことを止め", "町中を襲うことを止めな", "町中を襲うことを止めない", "町中を襲うことを止めない。", "町中を襲うことを止めない。", "町中を襲うことを止めない。", "町中を襲うことを止めない。", "町中を襲うことを止めない。", "町中を襲うことを止めない。"],
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんは", "ひろきくんはこ", "ひろきくんはこの", "ひろきくんはこのよ", "ひろきくんはこのよう", "ひろきくんはこのような", "ひろきくんはこのような事", "ひろきくんはこのような事態", "ひろきくんはこのような事態に", "ひろきくんはこのような事態に", "ひろきくんはこのような事態に", "ひろきくんはこのような事態に", "ひろきくんはこのような事態に"],
    ["人", "人生", "人生を", "人生を半", "人生を半ば", "人生を半ばあ", "人生を半ばあき", "人生を半ばあきら", "人生を半ばあきらめ", "人生を半ばあきらめか", "人生を半ばあきらめかけ", "人生を半ばあきらめかけて", "人生を半ばあきらめかけてい", "人生を半ばあきらめかけていた", "人生を半ばあきらめかけていた。", "人生を半ばあきらめかけていた。", "人生を半ばあきらめかけていた。", "人生を半ばあきらめかけていた。"],
    ["し", "しか", "しかし", "しかし、", "しかし、こ", "しかし、ここ", "しかし、ここで", "しかし、ここで思", "しかし、ここで思い", "しかし、ここで思いも", "しかし、ここで思いも寄", "しかし、ここで思いも寄ら", "しかし、ここで思いも寄らな", "しかし、ここで思いも寄らない", "しかし、ここで思いも寄らない朗", "しかし、ここで思いも寄らない朗報", "しかし、ここで思いも寄らない朗報が", "しかし、ここで思いも寄らない朗報が"],
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんの", "ひろきくんの前", "ひろきくんの前に", "ひろきくんの前に訪", "ひろきくんの前に訪れ", "ひろきくんの前に訪れた", "ひろきくんの前に訪れた。", "ひろきくんの前に訪れた。", "ひろきくんの前に訪れた。", "ひろきくんの前に訪れた。", "ひろきくんの前に訪れた。", "ひろきくんの前に訪れた。", "ひろきくんの前に訪れた。"],
    ["次", "次で", "次で出", "次で出る", "次で出る猫", "次で出る猫が", "次で出る猫が最", "次で出る猫が最後", "次で出る猫が最後と", "次で出る猫が最後との", "次で出る猫が最後とのこ", "次で出る猫が最後とのこと", "次で出る猫が最後とのことだ", "次で出る猫が最後とのことだ。", "次で出る猫が最後とのことだ。", "次で出る猫が最後とのことだ。", "次で出る猫が最後とのことだ。", "次で出る猫が最後とのことだ。"],
    ["今", "今ま", "今まで", "今までの", "今までの中", "今までの中で", "今までの中で一", "今までの中で一番", "今までの中で一番強", "今までの中で一番強い", "今までの中で一番強い。", "今までの中で一番強い。", "今までの中で一番強い。", "今までの中で一番強い。", "今までの中で一番強い。", "今までの中で一番強い。", "今までの中で一番強い。", "今までの中で一番強い。"],
    ["そ", "そし", "そして", "そして今", "そして今回", "そして今回は", "そして今回は目", "そして今回は目を", "そして今回は目を疑", "そして今回は目を疑う", "そして今回は目を疑うよ", "そして今回は目を疑うよう", "そして今回は目を疑うような", "そして今回は目を疑うような道", "そして今回は目を疑うような道が", "そして今回は目を疑うような道が", "そして今回は目を疑うような道が", "そして今回は目を疑うような道が"],
    ["通", "通れ", "通れる", "通れるよ", "通れるよう", "通れるように", "通れるようにな", "通れるようになっ", "通れるようになって", "通れるようになってい", "通れるようになっている", "通れるようになっている。", "通れるようになっている。", "通れるようになっている。", "通れるようになっている。", "通れるようになっている。", "通れるようになっている。", "通れるようになっている。"],
    ["そ", "それ", "それで", "それでも", "それでも、", "それでも、今", "それでも、今ま", "それでも、今まで", "それでも、今まで使", "それでも、今まで使っ", "それでも、今まで使って", "それでも、今まで使ってき", "それでも、今まで使ってきた", "それでも、今まで使ってきた戦", "それでも、今まで使ってきた戦術", "それでも、今まで使ってきた戦術で", "それでも、今まで使ってきた戦術で", "それでも、今まで使ってきた戦術で"],
    ["対", "対応", "対応す", "対応すれ", "対応すれば", "対応すれば通", "対応すれば通用", "対応すれば通用す", "対応すれば通用する", "対応すれば通用するは", "対応すれば通用するはず", "対応すれば通用するはずだ", "対応すれば通用するはずだ。", "対応すれば通用するはずだ。", "対応すれば通用するはずだ。", "対応すれば通用するはずだ。", "対応すれば通用するはずだ。", "対応すれば通用するはずだ。"],
    ["人", "人生", "人生の", "人生の目", "人生の目標", "人生の目標で", "人生の目標であ", "人生の目標である", "人生の目標である東", "人生の目標である東大", "人生の目標である東大に", "人生の目標である東大に行", "人生の目標である東大に行き", "人生の目標である東大に行きた", "人生の目標である東大に行きたい", "人生の目標である東大に行きたいと", "人生の目標である東大に行きたいとの", "人生の目標である東大に行きたいとの"],
    ["思", "思い", "思いを", "思いを抱", "思いを抱え", "思いを抱えな", "思いを抱えなが", "思いを抱えながら", "思いを抱えながら最", "思いを抱えながら最後", "思いを抱えながら最後の", "思いを抱えながら最後の試", "思いを抱えながら最後の試練", "思いを抱えながら最後の試練に", "思いを抱えながら最後の試練に", "思いを抱えながら最後の試練に", "思いを抱えながら最後の試練に", "思いを抱えながら最後の試練に"],
    ["挑", "挑む", "挑むの", "挑むので", "挑むのであ", "挑むのであっ", "挑むのであった", "挑むのであった。", "挑むのであった。。", "挑むのであった。。。", "挑むのであった。。。", "挑むのであった。。。", "挑むのであった。。。", "挑むのであった。。。", "挑むのであった。。。", "挑むのであった。。。", "挑むのであった。。。", "挑むのであった。。。"]
]

story_sentence6 = [
    ["つ", "つい", "ついに", "ついに町", "ついに町中", "ついに町中の", "ついに町中の凶", "ついに町中の凶暴", "ついに町中の凶暴な", "ついに町中の凶暴な猫", "ついに町中の凶暴な猫は", "ついに町中の凶暴な猫は", "ついに町中の凶暴な猫は", "ついに町中の凶暴な猫は", "ついに町中の凶暴な猫は", "ついに町中の凶暴な猫は", "ついに町中の凶暴な猫は", "ついに町中の凶暴な猫は"],
    ["姿", "姿を", "姿を現", "姿を現さ", "姿を現さな", "姿を現さなく", "姿を現さなくな", "姿を現さなくなっ", "姿を現さなくなった", "姿を現さなくなった。", "姿を現さなくなった。", "姿を現さなくなった。", "姿を現さなくなった。", "姿を現さなくなった。", "姿を現さなくなった。", "姿を現さなくなった。", "姿を現さなくなった。", "姿を現さなくなった。"],
    ["よ", "よう", "ようや", "ようやく", "ようやく、", "ようやく、ひ", "ようやく、ひろ", "ようやく、ひろき", "ようやく、ひろきく", "ようやく、ひろきくん", "ようやく、ひろきくんは", "ようやく、ひろきくんは安", "ようやく、ひろきくんは安全", "ようやく、ひろきくんは安全に", "ようやく、ひろきくんは安全に", "ようやく、ひろきくんは安全に", "ようやく、ひろきくんは安全に", "ようやく、ひろきくんは安全に"],
    ["学", "学校", "学校へ", "学校へ通", "学校へ通う", "学校へ通うこ", "学校へ通うこと", "学校へ通うことが", "学校へ通うことがで", "学校へ通うことができ", "学校へ通うことができる", "学校へ通うことができるよ", "学校へ通うことができるよう", "学校へ通うことができるように", "学校へ通うことができるようにな", "学校へ通うことができるようになっ", "学校へ通うことができるようになった", "学校へ通うことができるようになった。"],
    ["勉", "勉強", "勉強も", "勉強も集", "勉強も集中", "勉強も集中し", "勉強も集中して", "勉強も集中して取", "勉強も集中して取り", "勉強も集中して取り組", "勉強も集中して取り組ん", "勉強も集中して取り組んだ", "勉強も集中して取り組んだ結", "勉強も集中して取り組んだ結果", "勉強も集中して取り組んだ結果。", "勉強も集中して取り組んだ結果。。", "勉強も集中して取り組んだ結果。。。", "勉強も集中して取り組んだ結果。。。"],
    ["晴", "晴れ", "晴れて", "晴れて東", "晴れて東大", "晴れて東大に", "晴れて東大に受", "晴れて東大に受か", "晴れて東大に受かる", "晴れて東大に受かるこ", "晴れて東大に受かること", "晴れて東大に受かることが", "晴れて東大に受かることがで", "晴れて東大に受かることができ", "晴れて東大に受かることができた", "晴れて東大に受かることができた。", "晴れて東大に受かることができた。", "晴れて東大に受かることができた。"],
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんは", "ひろきくんは振", "ひろきくんは振り", "ひろきくんは振り返", "ひろきくんは振り返っ", "ひろきくんは振り返って", "ひろきくんは振り返ってみ", "ひろきくんは振り返ってみる", "ひろきくんは振り返ってみると", "ひろきくんは振り返ってみると、", "ひろきくんは振り返ってみると、", "ひろきくんは振り返ってみると、", "ひろきくんは振り返ってみると、"],
    ["凶", "凶暴", "凶暴な", "凶暴な猫", "凶暴な猫に", "凶暴な猫に命", "凶暴な猫に命を", "凶暴な猫に命を落", "凶暴な猫に命を落と", "凶暴な猫に命を落とさ", "凶暴な猫に命を落とされ", "凶暴な猫に命を落とされる", "凶暴な猫に命を落とされる", "凶暴な猫に命を落とされる", "凶暴な猫に命を落とされる", "凶暴な猫に命を落とされる", "凶暴な猫に命を落とされる", "凶暴な猫に命を落とされる"],
    ["危", "危険", "危険性", "危険性も", "危険性もあ", "危険性もあっ", "危険性もあった", "危険性もあったが", "危険性もあったが、", "危険性もあったが、", "危険性もあったが、", "危険性もあったが、", "危険性もあったが、", "危険性もあったが、", "危険性もあったが、", "危険性もあったが、", "危険性もあったが、", "危険性もあったが、"],
    ["更", "更に", "更に東", "更に東大", "更に東大に", "更に東大に受", "更に東大に受か", "更に東大に受かり", "更に東大に受かりた", "更に東大に受かりたい", "更に東大に受かりたいと", "更に東大に受かりたいとい", "更に東大に受かりたいという", "更に東大に受かりたいという気", "更に東大に受かりたいという気持", "更に東大に受かりたいという気持ち", "更に東大に受かりたいという気持ちを", "更に東大に受かりたいという気持ちを"],
    ["後", "後押", "後押し", "後押しし", "後押しして", "後押ししてく", "後押ししてくれ", "後押ししてくれた", "後押ししてくれた気", "後押ししてくれた気も", "後押ししてくれた気もす", "後押ししてくれた気もする", "後押ししてくれた気もする。", "後押ししてくれた気もする。", "後押ししてくれた気もする。", "後押ししてくれた気もする。", "後押ししてくれた気もする。", "後押ししてくれた気もする。"],
    ["あ", "あの", "あの時", "あの時、", "あの時、凶", "あの時、凶暴", "あの時、凶暴な", "あの時、凶暴な猫", "あの時、凶暴な猫が", "あの時、凶暴な猫が姿", "あの時、凶暴な猫が姿を", "あの時、凶暴な猫が姿を", "あの時、凶暴な猫が姿を", "あの時、凶暴な猫が姿を", "あの時、凶暴な猫が姿を", "あの時、凶暴な猫が姿を", "あの時、凶暴な猫が姿を", "あの時、凶暴な猫が姿を"],
    ["現", "現さ", "現さな", "現さなか", "現さなかっ", "現さなかった", "現さなかったら", "現さなかったら東", "現さなかったら東大", "現さなかったら東大に", "現さなかったら東大に", "現さなかったら東大に", "現さなかったら東大に", "現さなかったら東大に", "現さなかったら東大に", "現さなかったら東大に", "現さなかったら東大に", "現さなかったら東大に"],
    ["受", "受か", "受かっ", "受かって", "受かってい", "受かっていた", "受かっていたの", "受かっていたのだ", "受かっていたのだろ", "受かっていたのだろう", "受かっていたのだろうか", "受かっていたのだろうか。", "受かっていたのだろうか。。", "受かっていたのだろうか。。", "受かっていたのだろうか。。", "受かっていたのだろうか。。", "受かっていたのだろうか。。", "受かっていたのだろうか。。"],
    ["ひ", "ひろ", "ひろき", "ひろきく", "ひろきくん", "ひろきくんは", "ひろきくんはそ", "ひろきくんはそん", "ひろきくんはそんな", "ひろきくんはそんな複", "ひろきくんはそんな複雑", "ひろきくんはそんな複雑な", "ひろきくんはそんな複雑な気", "ひろきくんはそんな複雑な気持", "ひろきくんはそんな複雑な気持ち", "ひろきくんはそんな複雑な気持ちを", "ひろきくんはそんな複雑な気持ちを", "ひろきくんはそんな複雑な気持ちを"],
    ["抱", "抱え", "抱えな", "抱えなが", "抱えながら", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも", "抱えながらも"],
    ["終", "終わ", "終わり", "終わり良", "終わり良け", "終わり良けれ", "終わり良ければ", "終わり良ければ全", "終わり良ければ全て", "終わり良ければ全て良", "終わり良ければ全て良し", "終わり良ければ全て良しと", "終わり良ければ全て良しとの", "終わり良ければ全て良しとの精", "終わり良ければ全て良しとの精神", "終わり良ければ全て良しとの精神で", "終わり良ければ全て良しとの精神で", "終わり良ければ全て良しとの精神で"],
    ["将", "将来", "将来を", "将来を楽", "将来を楽し", "将来を楽しみ", "将来を楽しみに", "将来を楽しみにし", "将来を楽しみにした", "将来を楽しみにしたの", "将来を楽しみにしたので", "将来を楽しみにしたのであ", "将来を楽しみにしたのであっ", "将来を楽しみにしたのであった", "将来を楽しみにしたのであった。", "将来を楽しみにしたのであった。", "将来を楽しみにしたのであった。", "将来を楽しみにしたのであった。"]
]
    
def draw_text(bg, txt, x, y, fnt, col): # 影付き文字の表示
    cr = int(col[0]/2)
    cg = int(col[1]/2)
    cb = int(col[2]/2)
    sur = fnt.render(txt, True, (cr,cg,cb))
    bg.blit(sur, [x+1, y+1])
    cr = col[0]+128
    if cr > 255: cr = 255
    cg = col[1]+128
    if cg > 255: cg = 255
    cb = col[2]+128
    if cb > 255: cb = 255
    sur = fnt.render(txt, True, (cr,cg,cb))
    bg.blit(sur, [x-1, y-1])
    sur = fnt.render(txt, True, col)
    bg.blit(sur, [x, y])
    
def draw_battle(bg): # 戦闘画面の描画
    global pl_blink, emy_blink, dmg_eff
    bx = 0
    by = 0
    if dmg_eff > 0:
        dmg_eff = dmg_eff - 1
        bx = random.randint(-20, 20)
        by = random.randint(-10, 10)
    img_s = pygame.transform.scale(imgBtlBG, [900, 900])
    bg.blit(img_s, [bx, by-50])
    
def title_command(bg, fnt, key): # コマンドの入力と表示
    global title_cmd
    ent = False           
    if key[K_f]: # fキー
        title_cmd = 0
        ent = True
    if (os.path.exists("data/data"+str(1)+"/save_data"+str(1)+".txt") and \
       os.path.exists("data/data"+str(1)+"/save_data_maze_list"+str(1)+".txt") and \
       os.path.exists("data/data"+str(1)+"/save_data_map_move_list"+str(1)+".txt")) or \
       (os.path.exists("data/data"+str(2)+"/save_data"+str(2)+".txt") and \
       os.path.exists("data/data"+str(2)+"/save_data_maze_list"+str(2)+".txt") and \
       os.path.exists("data/data"+str(2)+"/save_data_map_move_list"+str(2)+".txt")) or \
       (os.path.exists("data/data"+str(3)+"/save_data"+str(3)+".txt") and \
       os.path.exists("data/data"+str(3)+"/save_data_maze_list"+str(3)+".txt") and \
       os.path.exists("data/data"+str(3)+"/save_data_map_move_list"+str(3)+".txt"))\
       : # セーブデータ1~3のどれか存在する
        if key[K_c]: # cキー
            title_cmd = 1
            ent = True
        if key[K_UP] and title_cmd > 0: #↑キー
            title_cmd -= 1
        if key[K_DOWN] and title_cmd < 1: #↓キー
            title_cmd += 1
    if key[K_SPACE] or key[K_RETURN]:
        ent = True
    for i in range(2):
        c = WHITE
        if title_cmd == i:
            c =BLINK[tmr%6]
        draw_text(bg, COMMAND_TITLE[i], 380, 520+i*80, fnt, c)
    return ent
    
def save_command(bg, fnt, key): # コマンドの入力と表示
    global save_cmd, stage_data
    ent = False
    if key[K_1]: # 1キー
        save_cmd = 0
        ent = True
    if key[K_2]: # 2キー
        save_cmd = 2
        ent = True
    if key[K_3]: # 3キー
        save_cmd = 4
        ent = True
    if key[K_UP] and save_cmd > 0: #↑キー
        save_cmd -= 1
        if save_cmd == 1:
            save_cmd = 0
    if key[K_DOWN] and save_cmd < 4: #↓キー
        save_cmd += 1
        if save_cmd == 3:
            save_cmd = 4
    if key[K_SPACE] or key[K_RETURN]:
        ent = True
    for i in range(3):
        c = WHITE
        if os.path.exists("data/data"+str(i+1)+"/save_data"+str(i+1)+".txt") and \
        os.path.exists("data/data"+str(i+1)+"/save_data_maze_list"+str(i+1)+".txt") and \
        os.path.exists("data/data"+str(i+1)+"/save_data_map_move_list"+str(i+1)+".txt")\
        : # セーブデータが存在するか
            file = open("data/data"+str(i+1)+"/save_data"+str(i+1)+".txt", 'r')
            r1 = file.readlines()
            file.close()
            stage_data[i] = int(r1[79].rstrip("\n"))
            rec = float(r1[82].rstrip("\n"))
        if save_cmd == int(i*2):
            c =BLINK[tmr%6]
        draw_text(bg, COMMAND_DATA[i], 260, 330+i*120, fnt, c)
        if stage_data[i] == 0:
            draw_text(bg, "データがありません", 260, 390+i*120, fnt, c)
        else:
            draw_text(bg, "Stage "+str(stage_data[i])+"  プレイ時間 "+str(timr_str(rec)), \
                      260, 390+i*120, fnt, c)
    return ent

def titleback_command(bg, fnt, key): # コマンドの入力と表示
    global titleback_cmd
    ent = False
    if key[K_y]: # yキー
        titleback_cmd = 0
        ent = True
    if key[K_n]: # nキー
        titleback_cmd = 1
        ent = True
    if key[K_UP] and titleback_cmd > 0: #↑キー
        titleback_cmd -= 1
    if key[K_DOWN] and titleback_cmd < 1: #↓キー
        titleback_cmd += 1
    if key[K_SPACE] or key[K_RETURN]:
        ent = True
    draw_text(bg, "本当にタイトルに戻りますか？", 300, 310, fnt, WHITE)
    for i in range(2):
        c = WHITE
        if titleback_cmd == i:
            c =BLINK[tmr%6]
        draw_text(bg, COMMAND_TITLEBACK[i], 300, 370+i*60, fnt, c)
    return ent

def timr_str(val):
    sec = int(val) # 引数を整数の秒数にする
    mi  = int(sec/60) # 分
    ho  = int(mi/3600)
    return "{}:{:02}:{:02}".format(ho, mi%60, sec%60)
    
def check_wall(cx, cy, di, dotx, doty): # 各方向に壁があるか調べる
    chk = False
    if di == 1: # 上
        mx = int(cx+(dotx/2))
        my = int(cy-1-(doty/2))
        if maze[my][mx] == 9: # 左上
            chk = True
        mx = int(cx+0.99+(dotx/2))
        if maze[my][mx] == 9: # 右上
            chk = True
    if di == 0: # 下
        mx = int(cx+(dotx/2))
        my = int(cy+1+(doty/2))
        if maze[my][mx] == 9: # 左下
            chk = True
        mx = int(cx+0.99+(dotx/2))
        if maze[my][mx] == 9: # 右下
            chk = True
    if di == 2: # 左
        mx = int(cx-1-(dotx/2))
        my = int(cy+(doty/2))
        if maze[my][mx] == 9: # 左上
            chk = True
        my = int(cy+0.99+(doty/2))
        if maze[my][mx] == 9: # 左下
            chk = True
    if di == 3: # 右
        mx = int(cx+1+(dotx/2))
        my = int(cy+(doty/2))
        if maze[my][mx] == 9: # 右上
            chk = True
        my = int(cy+0.99+(doty/2))
        if maze[my][mx] == 9: # 右下
            chk = True
    return chk

def clear_field(bg): # クリア箇所の点滅表示
    global field_tmr
    field_tmr += 1
    dx = 11
    dy = 6
    X = (dx-4)*62.85
    Y = (dy-4)*65.45
    tomei = pygame.Surface([62.85,65.45])
    tomei.fill(BLUE)
    tomei.set_colorkey(BLUE)
    tomei.set_alpha(128)
    if (int((field_tmr*10)/250))%2 == 0 and field_tmr%25 != 0: 
        pygame.draw.rect(tomei, (255,(field_tmr*10)%250,(field_tmr*10)%250), [0,0,62.85,65.45])
    elif (int((field_tmr*10)/250))%2 == 0 and field_tmr%25 == 0:
        pygame.draw.rect(tomei, (255,0,0), [0,0,62.85,65.45])
    elif (int((field_tmr*10)/250))%2 == 1 and field_tmr%25 != 0:
        pygame.draw.rect(tomei, (255,(250-field_tmr*10)%250,(250-field_tmr*10)%250), [0,0,62.85,65.45])
    elif (int((field_tmr*10)/250))%2 == 1 and field_tmr%25 == 0:
        pygame.draw.rect(tomei, (255,250,250), [0,0,62.85,65.45])
    bg.blit(tomei, [X,Y])

# 主人公クラスを作成
class MyCharacter:
    def __init__(self, imgPlayer, pl_x, pl_y, pl_d, pl_a, pl_lifemax, \
                 pl_str, pl_movmax):
        self.imgPlayer = imgPlayer
        self.pl_x = pl_x
        self.pl_y = pl_y
        self.pl_d = pl_d
        self.pl_a = pl_a
        self.pl_lifemax = pl_lifemax
        self.pl_life = pl_lifemax
        self.pl_str = pl_str
        self.pl_movmax = pl_movmax
        self.pl_mov = pl_movmax
        
    def draw_player(self, bg, tmr): # 主人公を描画する
        X = (pl_x+(pl_xs)/2-3)*62.85+(62.85-40)/2
        Y = (pl_y+(pl_ys)/2-3)*65.45
        if idx == 8 or idx == 7:
            img_s = pygame.transform.scale(imgPlayer[pl_a], [40, 60])
        else:
            img_s = pygame.transform.scale(imgPlayer[pl_a+(int(tmr/3)%4)], [40, 60])
        bg.blit(img_s, [X-62.45, Y-65.45])
        
    def draw_para(self, bg, fnt): # 主人公の能力を表示
        X = 30
        Y = 600
        bg.fill(BLUE, (X,Y,230,80))
        pygame.draw.rect(bg, BLACK, (X,Y,230,80), width=1)
        col = WHITE
        if pl_life > 0:
            if (pl_lifemax / pl_life) > 5 and tmr%2 == 0:
                col = RED
        else:
            col = RED
        draw_text(bg, "LIFE {}/{}".format(pl_life, pl_lifemax), \
                  X+30, Y+6, fnt, col)
        draw_text(bg, "STR "+str(pl_str), X+30, Y+33, fnt, WHITE)
        col = WHITE
        
    def draw_para_field_player(self, bg, fnt): # 主人公の能力を表示（フィールド）
        c1_X = (pl_x-4)*62.85+(62.85-40)/2
        c1_Y = (pl_y-4)*65.45
        if pl_x <= 10:
            bg.fill((51,51,204), (c1_X+80,c1_Y-40,150,100))
            pygame.draw.rect(bg, BLACK, \
                             (c1_X+80,c1_Y-40,150,100), width=1)
            draw_text(bg, "プレイヤー", \
                      c1_X+100, c1_Y-30, fnt, WHITE)
            draw_text(bg, "LIFE {}/{}".format(pl_life, pl_lifemax), \
                      c1_X+100, c1_Y, fnt, WHITE)
            draw_text(bg, "STR {}".format(pl_str), \
                      c1_X+100, c1_Y+30, fnt, WHITE)
        else:
            bg.fill((51,51,204), (c1_X-220,c1_Y-40,150,100))
            pygame.draw.rect(bg, BLACK, \
                             (c1_X-220,c1_Y-40,150,100), width=1)
            draw_text(bg, "プレイヤー", \
                      c1_X-200, c1_Y-30, fnt, WHITE)
            draw_text(bg, "LIFE {}/{}".format(pl_life, pl_lifemax), \
                      c1_X-200, c1_Y, fnt, WHITE)
            draw_text(bg, "STR {}".format(pl_str), \
                      c1_X-200, c1_Y+30, fnt, WHITE)
        
    def postion_player(self): # 主人公の初期配置
        global pl_x, pl_y, pl_d, pl_a
        pl_x = 4
        pl_y = 8
        pl_d = 0
        pl_a = 0
        
    def move_player(self, key): # 主人公の移動
        global idx, tmr, pl_x, pl_y, pl_d, pl_a, pl_life
        global pl_movmax, pl_mov, pl_xs, pl_ys, btl_cmd
        # 方向キーで上下左右に移動
        x = pl_x
        y = pl_y
        if key[K_UP] == 1:
            pl_d = 1
            if check_wall(pl_x, pl_y, pl_d, pl_xs, pl_ys) == False:
                pl_ys = pl_ys - 1
                if pl_ys == -2:
                    pl_y = pl_y - 1
                    pl_ys = 0
        else:
            if pl_ys == -1:
                pl_y = pl_y - 1
                pl_ys = 0
        if key[K_DOWN] == 1:
            pl_d = 0
            if check_wall(pl_x, pl_y, pl_d, pl_xs, pl_ys) == False:
                pl_ys = pl_ys + 1
                if pl_ys == 2:
                    pl_y = pl_y + 1
                    pl_ys = 0
        else:
            if pl_ys == 1:
                pl_y = pl_y + 1
                pl_ys = 0
        if key[K_LEFT] == 1:
            pl_d = 2
            if check_wall(pl_x, pl_y, pl_d, pl_xs, pl_ys) == False:
                pl_xs = pl_xs - 1
                if pl_xs == -2:
                    pl_x = pl_x - 1
                    pl_xs = 0
        else:
            if pl_xs == -1:
                pl_x = pl_x - 1
                pl_xs = 0
        if key[K_RIGHT] == 1:
            pl_d = 3
            if check_wall(pl_x, pl_y, pl_d, pl_xs, pl_ys) == False:
                pl_xs = pl_xs + 1
                if pl_xs == 2:
                    pl_x = pl_x + 1
                    pl_xs = 0
        else:
            if pl_xs == 1:
                pl_x = pl_x + 1
                pl_xs = 0
        pl_a = pl_d*4
        if pl_x != x or pl_y != y: # 移動したら残移動量を計算
            pl_mov = pl_mov - 1
        if pl_mov == 0: # 移動量ゼロになったらコマンド選択
            if emy_exist == 1:
                if (pl_x == emy_x and pl_y == emy_y-1) or \
                   (pl_x == emy_x and pl_y == emy_y+1) or \
                   (pl_y == emy_y and pl_x == emy_x-1) or \
                   (pl_y == emy_y and pl_x == emy_x+1): # 敵が隣接している
                    btl_cmd = 1
            if maze[pl_y][pl_x] == 1:
                btl_cmd = 0
            idx = 2
            tmr = 0
                
    def cal_can_move_range(self, bg, pl_y, pl_x, cal_mov, map_move):
        # 足跡をつける（現在歩数を代入）
        map_move[pl_y][pl_x] = cal_mov
        #残り歩数が0ならば終了
        if cal_mov == 0:
            return

        # 上へ行けるなら
        if map_move[pl_y-1][pl_x] != 9:
            self.cal_can_move_range(bg,pl_y-1,pl_x,cal_mov-1,map_move)
        # 右へ行けるなら
        if map_move[pl_y][pl_x+1] != 9:
            self.cal_can_move_range(bg,pl_y,pl_x+1,cal_mov-1,map_move)
        # 左へ行けるなら
        if map_move[pl_y][pl_x-1] != 9:
            self.cal_can_move_range(bg,pl_y,pl_x-1,cal_mov-1,map_move)
        # 下へ行けるなら
        if map_move[pl_y+1][pl_x] != 9:
            self.cal_can_move_range(bg,pl_y+1,pl_x,cal_mov-1,map_move)
            
    def move_range_draw(self, bg):
        global map_move
        for y in range(-4, 5):
            for x in range(-4, 5):
                dx = pl_x_map_tmp + x
                dy = pl_y_map_tmp + y
                X = (dx-4)*62.85
                Y = (dy-4)*65.45
                if map_move[dy][dx] == 0 or map_move[dy][dx] == 1 or \
                map_move[dy][dx] == 2 or map_move[dy][dx] == 3:
                    if map_move[dy-1][dx] == 9:
                        map_move[dy-1][dx] = 10
                    if map_move[dy-1][dx] == 11:
                        map_move[dy-1][dx] = 12
                    if map_move[dy+1][dx] == 9:
                        map_move[dy+1][dx] = 10
                    if map_move[dy+1][dx] == 11:
                        map_move[dy+1][dx] = 12
                    if map_move[dy][dx-1] == 9:
                        map_move[dy][dx-1] = 10
                    if map_move[dy][dx-1] == 11:
                        map_move[dy][dx-1] = 12
                    if map_move[dy][dx+1] == 9:
                        map_move[dy][dx+1] = 10
                    if map_move[dy][dx+1] == 11:
                        map_move[dy][dx+1] = 12
                # 移動範囲の表示
                if map_move[dy][dx] == 0 or map_move[dy][dx] == 1 or \
                map_move[dy][dx] == 2 or map_move[dy][dx] == 3:
                    tomei = pygame.Surface([60.85,63.45])
                    tomei.fill(RED)
                    tomei.set_colorkey(RED)
                    tomei.set_alpha(128)
                    pygame.draw.rect(tomei, BLUE, [0,0,60.85,63.45])
                    bg.blit(tomei, [X+1,Y+1])
                    pygame.draw.rect(bg, BLACK, (X+1,Y+1,60.85,63.45), width=1)
                # 攻撃範囲の表示
                if map_move[dy][dx] == 10 or map_move[dy][dx] == 12:
                    tomei = pygame.Surface([60.85,60.45])
                    tomei.fill(RED)
                    tomei.set_colorkey(RED)
                    tomei.set_alpha(128)
                    pygame.draw.rect(tomei, ORANGE, [0,0,60.85,63.45])
                    bg.blit(tomei, [X+1,Y+1])
                    pygame.draw.rect(bg, BLACK, (X+1,Y+1,60.85,63.45), width=1)
            
    def player_command(self, bg, fnt, key): # コマンドの入力と表示
        global btl_cmd, attack_item, recovery_item
        ent = False
        if maze[pl_y][pl_x] == 1:
            if recovery_item == 0: #C, W
                if key[K_c]: # cキー
                    btl_cmd = 0
                    ent = True
                if key[K_UP] and btl_cmd == 6: #↑キー
                    btl_cmd -= 3
                if key[K_DOWN] and btl_cmd == 0: #↓キー
                    btl_cmd += 3
                for i in range(0, 12, 6):
                    c = WHITE
                    if btl_cmd == i:
                        c =BLINK[tmr%6]
                    draw_text(bg, COMMAND[int(i/2)], 720, 330+(i*60)/6, fnt, c)
            else: #C, I, W
                if key[K_c]: # cキー
                    btl_cmd = 0
                    ent = True
                if key[K_i]: # Iキー
                    btl_cmd = 4
                    ent = True
                if key[K_UP] and btl_cmd == 4: #↑キー
                    btl_cmd -= 2
                if key[K_UP] and btl_cmd == 2:
                    btl_cmd = 0
                if key[K_UP] and (btl_cmd == 5 or btl_cmd == 6):
                    btl_cmd -= 1
                if key[K_DOWN] and btl_cmd == 4: #↓キー
                    btl_cmd += 1
                if key[K_DOWN] and btl_cmd == 5:
                    btl_cmd = 6
                if key[K_DOWN] and (btl_cmd == 0 or btl_cmd == 2):
                    btl_cmd += 2
                c = WHITE
                if btl_cmd == 0:
                    c =BLINK[tmr%6]
                draw_text(bg, COMMAND[0], 720, 330, fnt, c)
                c = WHITE
                if btl_cmd == 4:
                    c =BLINK[tmr%6]
                draw_text(bg, COMMAND[2], 720, 330+1*60, fnt, c)
                c = WHITE
                if btl_cmd == 6:
                    c =BLINK[tmr%6]
                draw_text(bg, COMMAND[3], 720, 330+2*60, fnt, c)
        if emy_exist == 1:
            if (pl_x == emy_x and pl_y == emy_y-1) or \
               (pl_x == emy_x and pl_y == emy_y+1) or \
               (pl_y == emy_y and pl_x == emy_x-1) or \
               (pl_y == emy_y and pl_x == emy_x+1): # 敵が隣接している
                if attack_item > 0 or recovery_item > 0: #A, I, W
                    if key[K_a]: # Aキー
                        btl_cmd = 2
                        ent = True
                    if key[K_i]: # Iキー
                        btl_cmd = 4
                        ent = True
                    if key[K_UP] and btl_cmd > 2: #↑キー
                        btl_cmd -= 1
                        if btl_cmd == 3:
                            btl_cmd = 2
                    if key[K_DOWN] and btl_cmd < 6: #↓キー
                        btl_cmd += 1
                        if btl_cmd == 5:
                            btl_cmd = 6
                    for i in range(2, 8, 2):
                        c = WHITE
                        if btl_cmd == i:
                            c =BLINK[tmr%6]
                        draw_text(bg, COMMAND[int(i/2)], 720, 330+(i-2)/2*60, fnt, c)
                else: #A, W
                    if key[K_a]: # Aキー
                        btl_cmd = 2
                        ent = True
                    if key[K_UP] and btl_cmd > 2: #↑キー
                        btl_cmd -= 2
                    if key[K_DOWN] and btl_cmd < 6: #↓キー
                        btl_cmd += 2
                    for i in range(2, 10, 4):
                        c = WHITE
                        if btl_cmd == i:
                            c =BLINK[tmr%6]
                        draw_text(bg, COMMAND[int(i/2)], 720, 330+(i-2)/2*(60/2), fnt, c)
        if key[K_w]: # Wキー
            btl_cmd = 6
            ent = True
        if maze[pl_y][pl_x] != 1:
            if (emy_exist == 1 and \
               not(pl_x == emy_x and pl_y == emy_y-1) and \
               not(pl_x == emy_x and pl_y == emy_y+1) and \
               not(pl_y == emy_y and pl_x == emy_x-1) and \
               not(pl_y == emy_y and pl_x == emy_x+1)) or \
               emy_exist != 1:
                if recovery_item == 0: #W
                    c = WHITE
                    if btl_cmd == 6:
                        c =BLINK[tmr%6]
                    draw_text(bg, COMMAND[3], 720, 330, fnt, c)
                else: #I, W
                    if key[K_i]: # Iキー
                        btl_cmd = 4
                        ent = True
                    if key[K_UP] and btl_cmd > 4: #↑キー
                        btl_cmd -= 1
                    if key[K_DOWN] and btl_cmd < 6: #↓キー
                        btl_cmd += 1
                    for i in range(4, 8, 2):
                        c = WHITE
                        if btl_cmd == i:
                            c =BLINK[tmr%6]
                        draw_text(bg, COMMAND[int(i/2)], 720, 330+(i-4)/2*60, fnt, c)
        if key[K_SPACE] or key[K_RETURN]:
            ent = True
        return ent
    
    def draw_battle_player(self, bg, tmr):
        global pl_blink
        if pl_life > 0 and pl_blink%2 == 0:
            img_s = pygame.transform.scale(imgPlayer[12+(int(tmr/3)%4)], [120, 180])
            bg.blit(img_s, [100+pl_step, 300])
        if pl_blink > 0:
            pl_blink = pl_blink - 1
            
    def menu_player(self, bg, fnt, tmr): # 主人公のメニュー画面
        global rec
        img_s = pygame.transform.scale\
        (imgPlayer[8+(int(tmr/2)%4)], [120, 180])
        bg.blit(img_s, [500, 230])
        draw_text(bg, "[B]戻る", 60, 100, fnt, WHITE)
        draw_text(bg, "[D]セーブ保存", 60, 130, fnt, WHITE)
        draw_text(bg, "[T]タイトル画面", 60, 160, fnt, WHITE)
        draw_text(bg, "プレイヤーステータス", 60, 220, fnt, WHITE)
        draw_text(bg, "LIFE {}/{}".format(pl_life, pl_lifemax), \
                  60, 250, fnt, WHITE)
        draw_text(bg, "STR {}".format(pl_str), 60, 280, fnt, WHITE)
        draw_text(bg, "プレイ時間 "+str(timr_str(rec)), 60, 310, fnt, WHITE)
    
# 敵クラスを作成
class EnemyCharacter:
    def __init__(self, imgEnemy, emy_name, emy_lifemax, emy_str, emy_movmax, \
                 emy_x, emy_y, emy_recovery):
        self.imgEnemy = imgEnemy
        self.emy_name = emy_name
        self.emy_lifemax = emy_lifemax
        self.emy_life = emy_lifemax
        self.emy_str = emy_str
        self.emy_movmax = emy_movmax
        self.emy_mov = emy_movmax
        self.emy_x = emy_x
        self.emy_y = emy_y
        self.emy_recovery = emy_recovery
        
    def init_enemy(self): # 敵ステータスの初期化
        global imgEnemy, emy_name, emy_lifemax, emy_life, emy_str
        global emy_x, emy_y, emy_movmax, emy_mov, emy_recovery
        imgEnemy = pygame.image.load(self.imgEnemy)
        emy_name = self.emy_name
        emy_lifemax = self.emy_lifemax
        emy_life = self.emy_life
        emy_str = self.emy_str
        emy_movmax = self.emy_movmax
        emy_mov = self.emy_mov
        emy_x = self.emy_x
        emy_y = self.emy_y
        emy_recovery = self.emy_recovery
        
    def draw_enemy(self, bg): # 敵を描画する
        X = (emy_x+(emy_xs)/3-3)*62.85+(62.85-57)/2
        Y = (emy_y+(emy_ys)/3-3)*65.45
        img_s = pygame.transform.scale(pygame.image.load(self.imgEnemy), \
                                       [57, 64])
        bg.blit(img_s, [X-62.45, Y-65.45])
        
    def draw_para_enemy(self, bg, fnt): # 敵の能力を表示
        X = 30
        Y = 600
        bg.fill(RED, (X+570,Y,230,80))
        pygame.draw.rect(bg, BLACK, (X+570,Y,230,80), width=1)
        col = WHITE
        if emy_life > 0:
            if (emy_lifemax / emy_life) > 5 and tmr%2 == 0:
                col = RED
        else:
            col = RED
        draw_text(bg, "LIFE {}/{}".format(emy_life, emy_lifemax), \
                  X+600, Y+6, fnt, col)
        draw_text(bg, "STR "+str(emy_str), X+600, Y+33, fnt, WHITE)
        col = WHITE
        
    def draw_para_field_enemy(self, bg, fnt): # 敵の能力を表示（フィールド）
        c2_X = (emy_x-3)*62.85+(62.85-57)/2
        c2_Y = (emy_y-3)*65.45
        if emy_x >= 11:
            bg.fill((51,51,204), (c2_X-250,c2_Y-100,150,100))
            pygame.draw.rect(bg, BLACK, \
                             (c2_X-250,c2_Y-100,150,100), width=1)
            draw_text(bg, "{}".format(emy_name), \
                      c2_X-230, c2_Y-90, fnt, WHITE)
            draw_text(bg, "LIFE {}/{}".format(emy_life, emy_lifemax), \
                      c2_X-230, c2_Y-60, fnt, WHITE)
            draw_text(bg, "STR {}".format(emy_str), \
                      c2_X-230, c2_Y-30, fnt, WHITE)
        else:
            bg.fill((51,51,204), (c2_X+50,c2_Y-100,150,100))
            pygame.draw.rect(bg, BLACK, \
                             (c2_X+50,c2_Y-100,150,100), width=1)
            draw_text(bg, "{}".format(emy_name), \
                      c2_X+70, c2_Y-90, fnt, WHITE)
            draw_text(bg, "LIFE {}/{}".format(emy_life, emy_lifemax), \
                      c2_X+70, c2_Y-60, fnt, WHITE)
            draw_text(bg, "STR {}".format(emy_str), \
                      c2_X+70, c2_Y-30, fnt, WHITE)
        
    def move_enemy(self, key): # 敵の移動
        global tmr, idx, pl_x, pl_y, emy_x, emy_y, emy_movmax, emy_mov
        global pl_mov, pl_turn, pl_x_tmp, pl_y_tmp, pl_d_tmp, pl_a_tmp, maze
        global emy_xs, emy_ys, emy_recovery
        # 主人公の位置次第で上下左右に移動
        x = emy_x
        y = emy_y
        if tmr >= 10:
            if emy_lifemax/emy_life >= 2 and emy_recovery == 1:
                recovery_time = 15
                idx = 23
                tmr = 0
            else:
                if emy_mov != 0 and \
                not(pl_x == emy_x and pl_y == emy_y-1) and \
                not(pl_x == emy_x and pl_y == emy_y+1) and \
                not(pl_y == emy_y and pl_x == emy_x-1) and \
                not(pl_y == emy_y and pl_x == emy_x+1):
                    if stage == 1 or stage == 2:
                        if emy_x == 15 and emy_y != 8:
                            emy_ys = emy_ys + 1
                            if emy_ys == 3:
                                emy_y = emy_y + 1
                                emy_ys = 0
                            if emy_x == 15 and emy_y == 8:
                                emy_mov -= 1
                                return
                        if emy_y == 8 and emy_x > 11:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                            if emy_y == 8 and emy_x == 11:
                                emy_mov -= 1
                                return
                        if pl_y <= emy_y:
                            if emy_x == 11 and emy_y != 10:
                                emy_ys = emy_ys + 1
                                if emy_ys == 3:
                                    emy_y = emy_y + 1
                                    emy_ys = 0
                                if emy_x == 11 and emy_y == 10:
                                    emy_mov -= 1
                                    return
                            if emy_y == 10 and emy_x != 7:
                                emy_xs = emy_xs - 1
                                if emy_xs == -3:
                                    emy_x = emy_x - 1
                                    emy_xs = 0
                                if emy_y == 10 and emy_x == 7:
                                    emy_mov -= 1
                                    return
                        if pl_y > emy_y:
                            if emy_x == 11:
                                emy_ys = emy_ys + 1
                                if emy_ys == 3:
                                    emy_y = emy_y + 1
                                    emy_ys = 0
                        if emy_x == 7 and emy_y != 8:
                            emy_ys = emy_ys - 1
                            if emy_ys == -3:
                                emy_y = emy_y - 1
                                emy_ys = 0
                            if emy_x == 7 and emy_y == 8:
                                emy_mov -= 1
                                return
                        if emy_y == 8 and emy_x <= 7:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                    if stage == 3:
                        if emy_x == 15 and emy_y != 8:
                            emy_ys = emy_ys + 1
                            if emy_ys == 3:
                                emy_y = emy_y + 1
                                emy_ys = 0
                            if emy_x == 15 and emy_y == 8:
                                emy_mov -= 1
                                return
                        if emy_y == 8 and emy_x > 11:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                            if emy_y == 8 and emy_x == 11:
                                emy_mov -= 1
                                return
                        if pl_y <= emy_y:
                            if emy_x == 11 and emy_y != 10:
                                emy_ys = emy_ys + 1
                                if emy_ys == 3:
                                    emy_y = emy_y + 1
                                    emy_ys = 0
                                if emy_x == 11 and emy_y == 10:
                                    emy_mov -= 1
                                    return
                            if emy_y == 10 and emy_x != 9:
                                emy_xs = emy_xs - 1
                                if emy_xs == -3:
                                    emy_x = emy_x - 1
                                    emy_xs = 0
                                if emy_y == 10 and emy_x == 9:
                                    emy_mov -= 1
                                    return
                        if pl_y > emy_y:
                            if emy_x == 11:
                                emy_ys = emy_ys + 1
                                if emy_ys == 3:
                                    emy_y = emy_y + 1
                                    emy_ys = 0
                        if emy_x == 9 and emy_y != 8:
                            emy_ys = emy_ys - 1
                            if emy_ys == -3:
                                emy_y = emy_y - 1
                                emy_ys = 0
                            if emy_x == 9 and emy_y == 8:
                                emy_mov -= 1
                                return
                        if emy_y == 8 and emy_x <= 9:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                    if stage == 4:
                        if emy_x == 15 and emy_y != 8:
                            emy_ys = emy_ys + 1
                            if emy_ys == 3:
                                emy_y = emy_y + 1
                                emy_ys = 0
                            if emy_x == 15 and emy_y == 8:
                                emy_mov -= 1
                                return
                        if emy_y == 8 and emy_x > 11:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                            if emy_y == 8 and emy_x == 11:
                                emy_mov -= 1
                                return
                        if emy_x == 11 and emy_y != 7:
                            emy_ys = emy_ys - 1
                            if emy_ys == -3:
                                emy_y = emy_y - 1
                                emy_ys = 0
                            if emy_x == 11 and emy_y == 7:
                                emy_mov -= 1
                                return
                        if emy_y == 7 and emy_x != 9 \
                        and emy_x >= 10 and emy_x <= 11:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                            if emy_y == 7 and emy_x == 9:
                                emy_mov -= 1
                                return
                        if emy_x == 9 and emy_y != 6:
                            emy_ys = emy_ys - 1
                            if emy_ys == -3:
                                emy_y = emy_y - 1
                                emy_ys = 0
                            if emy_x == 9 and emy_y == 6:
                                emy_mov -= 1
                                return
                        if emy_y == 6 and emy_x != 6 and emy_x != 15:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                            if emy_y == 6 and emy_x == 6:
                                emy_mov -= 1
                                return
                        if emy_x == 6 and emy_y != 8:
                            emy_ys = emy_ys + 1
                            if emy_ys == 3:
                                emy_y = emy_y + 1
                                emy_ys = 0
                            if emy_x == 6 and emy_y == 8:
                                emy_mov -= 1
                                return
                        if emy_y == 8 and emy_x <= 6:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                    if stage == 5:
                        if emy_x == 15 and emy_y != 8:
                            emy_ys = emy_ys + 1
                            if emy_ys == 3:
                                emy_y = emy_y + 1
                                emy_ys = 0
                            if emy_x == 15 and emy_y == 8:
                                emy_mov -= 1
                                return
                        if emy_y == 8 and emy_x > 11:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                            if emy_y == 8 and emy_x == 11:
                                emy_mov -= 1
                                return
                        if emy_x == 11 and emy_y != 13:
                            emy_ys = emy_ys + 1
                            if emy_ys == 3:
                                emy_y = emy_y + 1
                                emy_ys = 0
                            if emy_x == 11 and emy_y == 13:
                                emy_mov -= 1
                                return
                        if emy_y == 13 and emy_x != 5:
                            emy_xs = emy_xs - 1
                            if emy_xs == -3:
                                emy_x = emy_x - 1
                                emy_xs = 0
                            if emy_y == 13 and emy_x == 5:
                                emy_mov -= 1
                                return
                        if emy_x == 5 and emy_y != 8:
                            emy_ys = emy_ys - 1
                            if emy_ys == -3:
                                emy_y = emy_y - 1
                                emy_ys = 0
                            if emy_x == 5 and emy_y == 8:
                                emy_mov -= 1
                                return
                        if emy_y == 8 and emy_x == 5:
                            emy_xs = emy_xs + 1
                            if emy_xs == 3:
                                emy_x = emy_x + 1
                                emy_xs = 0
            if emy_x != x or emy_y != y: # 移動したら残移動量を計算
                emy_mov = emy_mov - 1
            if tmr%2 == 1:
                if (pl_x == emy_x and pl_y == emy_y-1) or \
                    (pl_x == emy_x and pl_y == emy_y+1) or \
                    (pl_y == emy_y and pl_x == emy_x-1) or \
                    (pl_y == emy_y and pl_x == emy_x+1): # プレイヤーが隣接している
                    idx = 11 # 戦闘開始
                    tmr = 0
                if emy_mov == 0: # 移動量ゼロになったら
                    if (pl_x == emy_x and pl_y == emy_y-1) or \
                        (pl_x == emy_x and pl_y == emy_y+1) or \
                        (pl_y == emy_y and pl_x == emy_x-1) or \
                        (pl_y == emy_y and pl_x == emy_x+1): # プレイヤーが隣接している
                        idx = 11 # 戦闘開始
                        tmr = 0
                    else:
                        maze[pl_y][pl_x] = 0
                        pl_x_tmp = pl_x
                        pl_y_tmp = pl_y
                        pl_d_tmp = pl_d
                        pl_a_tmp = pl_a
                        pl_mov = pl_movmax
                        pl_turn = 15
                        idx = 1
                        tmr = 0
                
    def draw_battle_enemy(self, bg): # 戦闘時の敵を描く
        global emy_blink
        if emy_life > 0 and emy_blink%2 == 0:
            img_s2 = pygame.transform.scale \
            (pygame.image.load(self.imgEnemy), [114, 128])
            bg.blit(img_s2, [640-emy_step, 330])
        if emy_blink > 0:
            emy_blink = emy_blink - 1
            
    def emy_status(self, bg, fnt, tmr): # 敵のステータス画面
        img_s = pygame.transform.scale\
        (pygame.image.load(self.imgEnemy), [160, 180])
        bg.blit(img_s, [500, 230])
        draw_text(bg, "[B]戻る", 60, 100, fnt, BLUE)
        draw_text(bg, "敵ステータス", 60, 130, fnt, BLUE)
        draw_text(bg, "LIFE {}/{}".format(emy_life, emy_lifemax), \
                  60, 160, fnt, BLUE)
        draw_text(bg, "STR {}".format(emy_str), 60, 190, fnt, BLUE)

# アイテムクラスを作成
class ItemCollection:
    def __init__(self, imgItem, item_x, item_y, item_str):
        self.imgItem = imgItem
        self.item_x = item_x
        self.item_y = item_y
        self.item_str = item_str
        
    def item_draw(self, bg): # フィールドのアイテムを描く
        X = (item_x-3)*62.85+(62.85-57)/2
        Y = (item_y-3)*65.45
        img_s = pygame.transform.scale\
        (pygame.image.load(self.imgItem), [57, 64])
        bg.blit(img_s, [X-62.45, Y-65.45])
        if maze[item_y+5][item_x-4] == 2:
            X2 = (item_x-3-4)*62.85+(62.85-57)/2
            Y2 = (item_y-3+5)*65.45
            img_s2 = pygame.transform.scale\
            (pygame.image.load(self.imgItem), [57, 64])
            bg.blit(img_s2, [X2-62.45, Y2-65.45])
        
    def item_slow(self, bg, tmr): # 戦闘時のアイテムを投げる
        img_s2 = pygame.transform.scale\
        (pygame.image.load(self.imgItem), [114, 128])
        bg.blit(img_s2, [-548+tmr*108, 320])
    
    def item_init(self): # アイテムの初期化
        global item_x, item_y, item_str
        item_x = self.item_x
        item_y = self.item_y
        item_str = self.item_str
        
    def item_command(self, bg, fnt, key): # コマンドの入力と表示
        global item_cmd, attack_item, attack_item_list
        ent = False
        if key[K_1] and attack_item_list[0] >= 1: # 1キー
            item_cmd = 0
            ent = True
        if key[K_2] and attack_item_list[1] >= 1: # 2キー
            item_cmd = 2
            ent = True
        if key[K_3] and attack_item_list[2] >= 1: # 3キー
            item_cmd = 6
            ent = True
        if key[K_4] and attack_item_list[3] >= 1: # 4キー
            item_cmd = 10
            ent = True
        if key[K_5] and attack_item_list[4] >= 1: # 5キー
            item_cmd = 12
            ent = True
        if key[K_UP] and item_cmd > 0: #↑キー
            item_cmd -= 1
            if item_cmd == 1:
                item_cmd = 0
            if item_cmd == 3:
                item_cmd = 2
            if item_cmd == 5:
                item_cmd = 4
            if item_cmd == 7:
                item_cmd = 6
            if item_cmd == 9:
                item_cmd = 8
        if key[K_DOWN] and item_cmd < 12: #↓キー
            item_cmd += 1
            if item_cmd == 11:
                item_cmd = 12
            if item_cmd == 9:
                item_cmd = 10
            if item_cmd == 7:
                item_cmd = 8
            if item_cmd == 5:
                item_cmd = 6
            if item_cmd == 3:
                item_cmd = 4
        if key[K_SPACE] or key[K_RETURN]:
            ent = True
        c = WHITE
        if item_cmd == 0:
            c =BLINK[tmr%6]
        draw_text(bg, COMMAND_ITEM[0], 720, 330, fnt, c)
        c = WHITE
        if item_cmd == 2:
            c =BLINK[tmr%6]
        draw_text(bg, COMMAND_ITEM[1], 720, 330+1*60, fnt, c)
        c = WHITE
        if item_cmd == 6:
            c =BLINK[tmr%6]
        draw_text(bg, COMMAND_ITEM[2], 720, 330+2*60, fnt, c)
        c = WHITE
        if item_cmd == 10:
            c =BLINK[tmr%6]
        draw_text(bg, COMMAND_ITEM[3], 720, 330+3*60, fnt, c)
        c = WHITE
        if item_cmd == 12:
            c =BLINK[tmr%6]
        draw_text(bg, COMMAND_ITEM[4], 720, 330+4*60, fnt, c)
        return ent
    
    def item_choice_command(self, bg, fnt, key): # コマンドの入力と表示
        global item_choice_cmd
        ent = False
        if emy_exist == 1:
            if ((pl_x == emy_x and pl_y == emy_y-1) or \
               (pl_x == emy_x and pl_y == emy_y+1) or \
               (pl_y == emy_y and pl_x == emy_x-1) or \
               (pl_y == emy_y and pl_x == emy_x+1)) and \
               attack_item > 0 and recovery_item > 0:
                # 敵が隣接していて、回復アイテム残っている
                if key[K_r]: # rキー
                    item_choice_cmd = 0
                    ent = True
                if key[K_a]: # aキー
                    item_choice_cmd = 1
                    ent = True
                if key[K_UP] and item_choice_cmd > 0: #↑キー
                    item_choice_cmd -= 1
                if key[K_DOWN] and item_choice_cmd < 1: #↓キー
                    item_choice_cmd += 1
                for i in range(2):
                    c = WHITE
                    if item_choice_cmd == i:
                        c =BLINK[tmr%6]
                    draw_text(bg, COMMAND_ITEM_CHOICE[i], 720, 330+i*60, fnt, c)
        if recovery_item > 0:
            if ((emy_exist == 1 and \
            not(pl_x == emy_x and pl_y == emy_y-1) and \
            not(pl_x == emy_x and pl_y == emy_y+1) and \
            not(pl_y == emy_y and pl_x == emy_x-1) and \
            not(pl_y == emy_y and pl_x == emy_x+1)) or \
            emy_exist != 1) or \
            (emy_exist == 1 and (pl_x == emy_x and pl_y == emy_y-1) or \
            (pl_x == emy_x and pl_y == emy_y+1) or \
            (pl_y == emy_y and pl_x == emy_x-1) or \
            (pl_y == emy_y and pl_x == emy_x+1) and attack_item == 0):
                # 回復アイテム残っている
                if key[K_r]: # rキー
                    item_choice_cmd = 0
                    ent = True
                c = WHITE
                if item_choice_cmd == 0:
                    c =BLINK[tmr%6]
                draw_text(bg, COMMAND_ITEM_CHOICE[0], 720, 330, fnt, c)
        if emy_exist == 1:
            if ((pl_x == emy_x and pl_y == emy_y-1) or \
               (pl_x == emy_x and pl_y == emy_y+1) or \
               (pl_y == emy_y and pl_x == emy_x-1) or \
               (pl_y == emy_y and pl_x == emy_x+1)) and \
               attack_item > 0 and recovery_item == 0:
                # 敵が隣接していて、回復アイテム残っていない
                if key[K_a]: # aキー
                    item_choice_cmd = 1
                    ent = True
                c = WHITE
                if item_choice_cmd == 1:
                    c =BLINK[tmr%6]
                draw_text(bg, COMMAND_ITEM_CHOICE[1], 720, 330, fnt, c)
        if key[K_SPACE] or key[K_RETURN]:
            ent = True
        return ent
    
    def menu_item(self, bg, fnt): # アイテムのメニュー画面
        draw_text(bg, "アイテム一覧", 60, 370, fnt, WHITE)
        draw_text(bg, "回復　　　　：{}".format(recovery_item), \
                  60, 400, fnt, WHITE)
        img_s = pygame.transform.scale(pygame.image.load\
        ("image/item/recovery_item0.png"), [42, 46])
        bg.blit(img_s, [115, 380])
        for i in range(5):
            draw_text(bg, "爆弾{}　　　：{}".format(i+1,attack_item_list[i]), \
                      60, 430+30*i, fnt, WHITE)
            img_s2 = pygame.transform.scale(pygame.image.load\
            ("image/item/attack_item"+str(i)+".png"), [42, 46])
            bg.blit(img_s2, [115, 410+30*i])
            
def main(): # メイン処理
    global speed, volume, idx, tmr, btl_cmd, stage, title_cmd
    global pl_lifemax, pl_life, pl_str, pl_step, pl_movmax, pl_mov, pl_turn
    global emy_lifemax, emy_life, emy_str, emy_name, emy_recovery
    global emy_movmax, emy_mov, emy_step, emy_x, emy_y, emy_exist
    global pl_blink, emy_blink, dmg_eff
    global pl_a, pl_x, pl_y, pl_d, pl_xs, pl_ys, maze, map_move
    global pl_x_tmp, pl_y_tmp, pl_d_tmp, pl_a_tmp, pl_x_map_tmp, pl_y_map_tmp
    global attack_item, attack_item_list
    global item_x, item_y, item_str, item_get, recovery_time, recovery_item
    global data_choice, continue_data, save_data, rec
    global titleback_cmd, title_choice, item_choice_cmd
    dmg = 0
    cal_mov = 0
    story = 0
    x = 0
    lr = 1
    mouse_x = 0
    mouse_y = 0
    cursor_x = 0
    cursor_y = 0
    idou = 0
    
    pygame.init()
    pygame.display.set_caption("命がけの登校")
    screen = pygame.display.set_mode((880, 720))
    clock = pygame.time.Clock()
    font = pygame.font.Font("font/ipaexg.ttf", 25)
    fontS = pygame.font.Font("font/ipaexg.ttf", 18)
    
    se = [ # 効果音とジングル
        pygame.mixer.Sound("sound/attack.ogg"),
        pygame.mixer.Sound("sound/bomb.ogg"),
        pygame.mixer.Sound("sound/btn_decision.ogg"),
        pygame.mixer.Sound("sound/btn_choice.ogg"),
        pygame.mixer.Sound("sound/btn_cancel.ogg"),
        pygame.mixer.Sound("sound/item_get.ogg"),
        pygame.mixer.Sound("sound/recovery.ogg")
    ]
    
    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == pygame.K_F1:
                    screen = pygame.display.set_mode((880,720), pygame.FULLSCREEN)
                if event.key == pygame.K_F2 or event.key == pygame.K_ESCAPE:
                    screen = pygame.display.set_mode((880,720))
                if event.key == K_s:
                    speed = speed + 1
                    speed = ((speed-1)%3)+1
                if event.key == K_v:
                    volume = volume + 1
                    volume = (volume%5)
                    pygame.mixer.music.set_volume(0.05*volume)
                # マウスクリック
            if event.type == MOUSEBUTTONDOWN:
                if cursor_x == pl_x-4 and cursor_y == pl_y-4:
                    idou = 1
                if emy_exist == 1 and cursor_x == emy_x-4 and cursor_y == emy_y-4:
                    idou = 2
                
        tmr = tmr + 1
        key = pygame.key.get_pressed()
        
        if idx == 0: # タイトル画面
            if tmr == 1:
                pygame.mixer.music.load("sound/start.ogg")
                pygame.mixer.music.play(-1)
                pygame.mixer.music.set_volume(0.05*volume)
            img_s = pygame.transform.scale(imgTitle, [1045, 810])
            screen.blit(img_s, [-24, -27])
            if x == -300:
                lr = 1
            if x == 900:
                lr = -1
            x += lr*20
            img_s2 = pygame.transform.scale(imgPlayer[10+lr*2+(int(tmr/2)%4)], [120, 180])
            screen.blit(img_s2, [100+x, 300])
            if story == 0:
                draw_text(screen, "Life-threatening school attendance", \
                          230, 160, font, ORANGE)
                if data_choice == 0:
                    draw_text(screen, "スペースキーを押してください", \
                              260, 560, font, BLINK[tmr%6])
            if story == 0 and key[K_SPACE] == 1 and data_choice == 0:
                titleback_cmd = 1
                se[3].play()
                se[3].set_volume(0.1*volume)
                data_choice = 1
                tmr = 2
                # 初めから、続きからを選択
            if data_choice == 1:
                if title_command(screen, font, key) == True and tmr >= 6 and continue_data == 0:
                    if title_cmd == 0: # 初めからを選択
                        se[2].play()
                        se[2].set_volume(0.1*volume)
                        story = 1
                        idx = 18 # ストーリーを流す
                        tmr = 0
                    if title_cmd == 1: # 続きからを選択
                        se[3].play()
                        se[3].set_volume(0.1*volume)
                        continue_data = 1
                        tmr = 2
                if continue_data == 1:
                    if tmr >= 6:
                        screen.fill((51,51,204), (230,300,400,400))
                        pygame.draw.rect(screen, BLACK, (230,300,400,400), width=1)
                        if save_command(screen, font, key) == True:
                            for i in range(3):
                                if save_cmd == int(i*2) and \
                                os.path.exists("data/data"+str(int(save_cmd/2)+1)+"/save_data"+str(int(save_cmd/2)+1)+".txt") and \
                                os.path.exists("data/data"+str(int(save_cmd/2)+1)+"/save_data_maze_list"+str(int(save_cmd/2)+1)+".txt") and \
                                os.path.exists("data/data"+str(int(save_cmd/2)+1)+"/save_data_map_move_list"+str(int(save_cmd/2)+1)+".txt")\
                                : # セーブデータ1~3から始める
                                    se[2].play()
                                    se[2].set_volume(0.1*volume)
                                    save_data = i+1
                                    continue_data = 2
                                    tmr = 2
                        if key[K_b] == 1: # 戻る
                            se[4].play()
                            se[4].set_volume(0.1*volume)
                            continue_data = 0
                        draw_text(screen, "[B]戻る", 740, 660, fontS, WHITE)
                if continue_data == 2: # セーブデータから始める
                    if tmr >= 2 and tmr <= 4:
                        # 前回のセーブデータを出力(変数)
                        file_2 = open("data/data"+str(save_data)+"/save_data"+str(save_data)+".txt", 'r')
                        r1 = file_2.readlines()
                        file_2.close()
                        speed = int(r1[1].rstrip("\n"))
                        volume = int(r1[4].rstrip("\n"))
                        pl_turn = int(r1[7].rstrip("\n"))
                        pl_x = int(r1[10].rstrip("\n"))
                        pl_y = int(r1[13].rstrip("\n"))
                        pl_x_tmp = int(r1[16].rstrip("\n"))
                        pl_y_tmp = int(r1[19].rstrip("\n"))
                        pl_xs = int(r1[22].rstrip("\n"))
                        pl_ys = int(r1[25].rstrip("\n"))
                        pl_d = int(r1[28].rstrip("\n"))
                        pl_a = int(r1[31].rstrip("\n"))
                        pl_d_tmp = int(r1[34].rstrip("\n"))
                        pl_a_tmp = int(r1[37].rstrip("\n"))
                        pl_lifemax = int(r1[40].rstrip("\n"))
                        pl_life = int(r1[43].rstrip("\n"))
                        pl_str = int(r1[46].rstrip("\n"))
                        pl_movmax = int(r1[49].rstrip("\n"))
                        pl_mov = int(r1[52].rstrip("\n"))
                        emy_lifemax = int(r1[55].rstrip("\n"))
                        emy_life = int(r1[58].rstrip("\n"))
                        emy_str = int(r1[61].rstrip("\n"))
                        emy_movmax = int(r1[64].rstrip("\n"))
                        emy_mov = int(r1[67].rstrip("\n"))
                        emy_x = int(r1[70].rstrip("\n"))
                        emy_y = int(r1[73].rstrip("\n"))
                        emy_exist = int(r1[76].rstrip("\n"))
                        stage = int(r1[79].rstrip("\n"))
                        rec = float(r1[82].rstrip("\n"))
                        attack_item = int(r1[85].rstrip("\n"))
                        item_x = int(r1[88].rstrip("\n"))
                        item_y = int(r1[91].rstrip("\n"))
                        item_str = int(r1[94].rstrip("\n"))
                        recovery_item = int(r1[97].rstrip("\n"))
                        emy_recovery = int(r1[100].rstrip("\n"))
                        # 前回のセーブデータを出力（attack_item_listリスト）
                        f = open("data/data"+str(save_data)+"/save_data_attack_item_list"+str(save_data)+".txt",'r')
                        attack_item_list = []
                        for i in f:
                            attack_item_list.append(int(i.rstrip("\n")))
                        f.close()
                        # 前回のセーブデータを出力（mazeリスト）
                        f=open("data/data"+str(save_data)+"/save_data_maze_list"+str(save_data)+".txt",'r')
                        datafile=f.readline()
                        n=datafile[0]
                        i=0
                        maze=[]
                        while True:
                            data=f.readline()
                            if data=='':
                                break
                            data_in=data.split()
                            da=[int(k) for k in data_in]
                            maze.append(da)
                        # 前回のセーブデータを出力（map_moveリスト）
                        f=open("data/data"+str(save_data)+"/save_data_map_move_list"+str(save_data)+".txt",'r')
                        datafile=f.readline()
                        n=datafile[0]
                        i=0
                        map_move=[]
                        while True:
                            data=f.readline()
                            if data=='':
                                break
                            data_in=data.split()
                            da=[int(k) for k in data_in]
                            map_move.append(da)
                    if tmr == 5:
                        idx = 9
                        tmr = 0
                        
        elif idx == 18: # ストーリーを流す
            draw_text(screen, "[SPACE]スペースキーで進む", 640, 660, fontS, WHITE) 
            if stage == 1:
                if story >= 1:
                    img_s = pygame.transform.scale(imgStory, [900, 750])
                    screen.blit(img_s, [0, 0])
                    screen.fill((51,51,204), (100,550,680,80))
                    pygame.draw.rect(screen, WHITE, (100,550,680,80), width=3)
                    draw_text(screen, "[Q]スキップ", \
                              50, 660, fontS, WHITE)
                    draw_text(screen, "[SPACE]スペースキーで進む", 640, 660, fontS, WHITE) 
                    if key[K_q] == 1: # ストーリーを飛ばす
                        story = 8
                for story_b in range(7):
                    if story == story_b + 1:
                        for story_a in range(18):
                            if tmr == story_a:
                                draw_text(screen, \
                                          story_sentence[story_b][story_a], \
                                          140, 575, font, WHITE)
                        if tmr >= 17:
                            draw_text(screen, story_sentence[story_b][17], \
                                      140, 575, font, WHITE)
                        if tmr >= 3 and key[K_SPACE] == 1:
                            story += 1
                            tmr = 0
                if story == 8:
                    mycharacter[0].postion_player()
                    emycharacter[stage-1].init_enemy()
                    pl_lifemax = 100
                    pl_life = pl_lifemax
                    pl_str = 20
                    pl_x_tmp = pl_x
                    pl_y_tmp = pl_y
                    pl_xs = 0
                    pl_ys = 0
                    pl_d_tmp = pl_d
                    pl_a_tmp = pl_a
                    pl_movmax = 3
                    pl_mov = pl_movmax
                    pl_turn = 15
                    emy_exist = 1
                    maze = [
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 2, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
                    ]
                    item_collection[stage-1].item_init()
                    idx = 9
                    tmr = 0
            if stage == 2:
                if story >= 1:
                    img_s = pygame.transform.scale(imgStory, [900, 750])
                    screen.blit(img_s, [0, 0])
                    screen.fill((51,51,204), (100,550,680,80))
                    pygame.draw.rect(screen, WHITE, (100,550,680,80), width=3)
                    draw_text(screen, "[Q]スキップ", \
                              50, 660, fontS, WHITE)
                    draw_text(screen, "[SPACE]スペースキーで進む", 640, 660, fontS, WHITE) 
                    if key[K_q] == 1: # ストーリーを飛ばす
                        story = 9
                for story_b in range(8):
                    if story == story_b + 1:
                        for story_a in range(18):
                            if tmr == story_a:
                                draw_text(screen, \
                                          story_sentence2[story_b][story_a], \
                                          140, 575, font, WHITE)
                        if tmr >= 17:
                            draw_text(screen, story_sentence2[story_b][17], \
                                      140, 575, font, WHITE)
                        if tmr >= 3 and key[K_SPACE] == 1:
                            story += 1
                            tmr = 0
                if story == 9:
                    idx = 9
                    tmr = 0
            if stage == 3:
                if story >= 1:
                    img_s = pygame.transform.scale(imgStory, [900, 750])
                    screen.blit(img_s, [0, 0])
                    screen.fill((51,51,204), (100,550,680,80))
                    pygame.draw.rect(screen, WHITE, (100,550,680,80), width=3)
                    draw_text(screen, "[Q]スキップ", \
                              50, 660, fontS, WHITE)
                    draw_text(screen, "[SPACE]スペースキーで進む", 640, 660, fontS, WHITE) 
                    if key[K_q] == 1: # ストーリーを飛ばす
                        story = 13
                for story_b in range(12):
                    if story == story_b + 1:
                        for story_a in range(18):
                            if tmr == story_a:
                                draw_text(screen, \
                                          story_sentence3[story_b][story_a], \
                                          140, 575, font, WHITE)
                        if tmr >= 17:
                            draw_text(screen, story_sentence3[story_b][17], \
                                      140, 575, font, WHITE)
                        if tmr >= 3 and key[K_SPACE] == 1:
                            story += 1
                            tmr = 0
                if story == 13:
                    idx = 9
                    tmr = 0
            if stage == 4:
                if story >= 1:
                    img_s = pygame.transform.scale(imgStory, [900, 750])
                    screen.blit(img_s, [0, 0])
                    screen.fill((51,51,204), (100,550,680,80))
                    pygame.draw.rect(screen, WHITE, (100,550,680,80), width=3)
                    draw_text(screen, "[Q]スキップ", \
                              50, 660, fontS, WHITE)
                    draw_text(screen, "[SPACE]スペースキーで進む", 640, 660, fontS, WHITE) 
                    if key[K_q] == 1: # ストーリーを飛ばす
                        story = 12
                for story_b in range(11):
                    if story == story_b + 1:
                        for story_a in range(18):
                            if tmr == story_a:
                                draw_text(screen, \
                                          story_sentence4[story_b][story_a], \
                                          140, 575, font, WHITE)
                        if tmr >= 17:
                            draw_text(screen, story_sentence4[story_b][17], \
                                      140, 575, font, WHITE)
                        if tmr >= 3 and key[K_SPACE] == 1:
                            story += 1
                            tmr = 0
                if story == 12:
                    idx = 9
                    tmr = 0
            if stage == 5:
                if story >= 1:
                    img_s = pygame.transform.scale(imgStory, [900, 750])
                    screen.blit(img_s, [0, 0])
                    screen.fill((51,51,204), (100,550,680,80))
                    pygame.draw.rect(screen, WHITE, (100,550,680,80), width=3)
                    draw_text(screen, "[Q]スキップ", \
                              50, 660, fontS, WHITE)
                    draw_text(screen, "[SPACE]スペースキーで進む", 640, 660, fontS, WHITE)
                    if key[K_q] == 1: # ストーリーを飛ばす
                        story = 16
                for story_b in range(15):
                    if story == story_b + 1:
                        for story_a in range(18):
                            if tmr == story_a:
                                draw_text(screen, \
                                          story_sentence5[story_b][story_a], \
                                          140, 575, font, WHITE)
                        if tmr >= 17:
                            draw_text(screen, story_sentence5[story_b][17], \
                                      140, 575, font, WHITE)
                        if tmr >= 3 and key[K_SPACE] == 1:
                            story += 1
                            tmr = 0
                if story == 16:
                    idx = 9
                    tmr = 0
            if stage == 6:
                if story >= 1:
                    img_s = pygame.transform.scale(imgEnding, [900, 750])
                    screen.blit(img_s, [0, 0])
                    screen.fill((51,51,204), (100,550,680,80))
                    pygame.draw.rect(screen, BLACK, (100,550,680,80), width=3)
                    draw_text(screen, "[SPACE]スペースキーで進む", 640, 660, fontS, WHITE)
                if story >= 6:
                    img_s2 = pygame.transform.scale(imgPlayer[(int(tmr/2)%4)], [120, 180])
                    screen.blit(img_s2, [380, 300])
                for story_b in range(18):
                    if story == story_b + 1:
                        for story_a in range(18):
                            if tmr == story_a:
                                draw_text(screen, \
                                          story_sentence6[story_b][story_a], \
                                          140, 575, font, WHITE)
                        if tmr >= 17:
                            draw_text(screen, story_sentence6[story_b][17], \
                                      140, 575, font, WHITE)
                        if tmr >= 3 and key[K_SPACE] == 1:
                            story += 1
                            tmr = 0
                if story == 19:
                    draw_text(screen, "終わり", 140, 575, font, WHITE)
                    draw_text(screen, "[T]タイトルに戻る", \
                              50, 660, fontS, WHITE) 
                    if key[K_t] == 1: # タイトルに戻る
                        story = 0
                        stage = 1
                        data_choice = 0
                        continue_data = 0
                        idx = 20
                        tmr = 0
                
        elif idx == 1: # プレイヤーのターン
            rec = rec + 1/(4+2*speed)
            btl_cmd = 6
            if tmr == 1:
                for dy in range(19):
                    for dx in range(22):
                        if map_move[dy][dx] == 0 or \
                        map_move[dy][dx] == 1 or \
                        map_move[dy][dx] == 2 or \
                        map_move[dy][dx] == 3 or \
                        map_move[dy][dx] == 12:
                            map_move[dy][dx] = 11
                        if map_move[dy][dx] == 10:
                            map_move[dy][dx] = 9
                if emy_exist == 1:
                    maze[emy_y][emy_x] = 9 # 敵が壁
                    map_move[emy_y][emy_x] = 9
                if emy_exist == 0:
                    map_move[emy_y][emy_x] = 11
                mycharacter[0].cal_can_move_range(screen, pl_y, pl_x, \
                                                  pl_movmax, map_move)
                pl_x_map_tmp = pl_x
                pl_y_map_tmp = pl_y
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            draw_text(screen, "Stage "+str(stage), 390, 40, font, WHITE)
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            for event in pygame.event.get():
                # マウスポインタで移動
                if event.type == MOUSEMOTION:
                    mouse_x, mouse_y = event.pos # マウス位置取得
                    if 0 <= mouse_x and mouse_x < 62.85*13 \
                    and 24 <= mouse_y and mouse_y < 65.45*11:
                        cursor_x = int((mouse_x)/62.85)
                        cursor_y = int((mouse_y)/65.45)
            if tmr >= 5:
                if idou == 1 or key[K_RETURN] == 1: # プレイヤーの移動
                    se[3].play()
                    se[3].set_volume(0.1*volume)
                    idx = 12
                    tmr = 0
                    idou = 0
                if idou == 2: # 敵ステータス表示
                    se[3].play()
                    se[3].set_volume(0.1*volume)
                    idx = 19
                    tmr = 0
                    idou = 0
                if cursor_x == pl_x-4 and cursor_y == pl_y-4:
                    # プレイヤーをかざしたらステータス表示
                    mycharacter[0].draw_para_field_player(screen, fontS)
                if emy_exist == 1 and cursor_x == emy_x-4 and cursor_y == emy_y-4:
                    # 敵をかざしたらステータス表示
                    emycharacter[stage-1].draw_para_field_enemy(screen, fontS)
            pygame.draw.rect(screen, WHITE, [cursor_x*62.85, cursor_y*65.45, \
                                            62.85, 65.45], width=3)
            if pl_turn > 0:
                pl_turn = pl_turn - 1
                draw_text(screen, "プレイヤーのターン", 300, 180, font, CYAN)
            if key[K_m] == 1:
                se[3].play()
                se[3].set_volume(0.1*volume)
                idx = 15
            draw_text(screen, "[M]メニュー画面".format(pl_mov), 50, 660, fontS, WHITE) 
        
        elif idx == 15: # メニュー画面に移動
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgMenu, [1020, 828])
            screen.blit(img_s, [-23, -30])
            screen.fill((51,51,204), (40,80,220,510))
            pygame.draw.rect(screen, BLACK, (40,80,220,510), width=1)
            mycharacter[0].menu_player(screen, fontS, tmr)
            item_collection[0].menu_item(screen, fontS)
            if tmr >= 5:
                # プレイヤーの移動画面に戻る
                if key[K_b] == 1 and title_choice == 0:
                    se[4].play()
                    se[4].set_volume(0.1*volume)
                    idx = 1
                # タイトル画面に戻る
                if key[K_t] == 1 and title_choice == 0:
                    se[3].play()
                    se[3].set_volume(0.1*volume)
                    title_choice = 1
                if title_choice == 1:
                    screen.fill((51,51,204), (280,280,390,200))
                    pygame.draw.rect(screen, BLACK, (280,280,390,200), width=1)
                    if titleback_command(screen, font, key) == True:
                        if titleback_cmd == 0:
                            se[2].play()
                            se[2].set_volume(0.1*volume)
                            maze[emy_y][emy_x] = 0
                            map_move[emy_y][emy_x] = 0
                            story = 0
                            stage = 1
                            data_choice = 0
                            continue_data = 0
                            title_choice = 0
                            idx = 20
                            tmr = 0
                        if titleback_cmd == 1:
                            se[4].play()
                            se[4].set_volume(0.1*volume)
                            title_choice = 0
            # セーブデータを保存
            if key[K_d] == 1 and title_choice == 0:
                se[3].play()
                se[3].set_volume(0.1*volume)
                idx = 16
                tmr = 0
                
        elif idx == 19: # 敵ステータス画面に移動
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgBtlBG, [900, 900])
            screen.blit(img_s, [0, -50])
            emycharacter[stage-1].emy_status(screen, fontS, tmr)
            # プレイヤーの移動画面に戻る
            if key[K_b] == 1:
                se[4].play()
                se[4].set_volume(0.1*volume)
                idx = 1
                
        elif idx == 16: # セーブデータ選択
            rec = rec + 1/(4+2*speed)
            if tmr >= 5:
                screen.fill((51,51,204), (230,300,400,400))
                pygame.draw.rect(screen, BLACK, (230,300,400,400), width=1)
                if save_command(screen, font, key) == True:
                    for i in range(3):
                        if save_cmd == int(i*2): # セーブデータ1~3に保存
                            se[2].play()
                            se[2].set_volume(0.1*volume)
                            save_data = i+1
                            idx = 17
                            tmr = 0
                if key[K_b] == 1: # 戻る
                    se[4].play()
                    se[4].set_volume(0.1*volume)
                    idx = 15
                    tmr = 0
                    
        elif idx == 17: # セーブデータ保存
            rec = rec + 1/(4+2*speed)
            if tmr <= 5:
                # セーブデータを上書き（変数）
                file = open("data/data"+str(save_data)+"/save_data"+str(save_data)+".txt", 'w')
                file.write("speed"+"\n"+str(speed)+"\n"+"\n"+\
                           "volume"+"\n"+str(volume)+"\n"+"\n"+\
                           "pl_turn"+"\n"+str(pl_turn)+"\n"+"\n"+\
                           "pl_x"+"\n"+str(pl_x)+"\n"+"\n"+\
                           "pl_y"+"\n"+str(pl_y)+"\n"+"\n"+\
                           "pl_x_tmp"+"\n"+str(pl_x_tmp)+"\n"+"\n"+\
                           "pl_y_tmp"+"\n"+str(pl_y_tmp)+"\n"+"\n"+\
                           "pl_xs"+"\n"+str(pl_xs)+"\n"+"\n"+\
                           "pl_ys"+"\n"+str(pl_ys)+"\n"+"\n"+\
                           "pl_d"+"\n"+str(pl_d)+"\n"+"\n"+\
                           "pl_a"+"\n"+str(pl_a)+"\n"+"\n"+\
                           "pl_d_tmp"+"\n"+str(pl_d_tmp)+"\n"+"\n"+\
                           "pl_a_tmp"+"\n"+str(pl_a_tmp)+"\n"+"\n"+\
                           "pl_lifemax"+"\n"+str(pl_lifemax)+"\n"+"\n"+\
                           "pl_life"+"\n"+str(pl_life)+"\n"+"\n"+\
                           "pl_str"+"\n"+str(pl_str)+"\n"+"\n"+\
                           "pl_movmax"+"\n"+str(pl_movmax)+"\n"+"\n"+\
                           "pl_mov"+"\n"+str(pl_mov)+"\n"+"\n"+\
                           "emy_lifemax"+"\n"+str(emy_lifemax)+"\n"+"\n"+\
                           "emy_life"+"\n"+str(emy_life)+"\n"+"\n"+\
                           "emy_str"+"\n"+str(emy_str)+"\n"+"\n"+\
                           "emy_movmax"+"\n"+str(emy_movmax)+"\n"+"\n"+\
                           "emy_mov"+"\n"+str(emy_mov)+"\n"+"\n"+\
                           "emy_x"+"\n"+str(emy_x)+"\n"+"\n"+\
                           "emy_y"+"\n"+str(emy_y)+"\n"+"\n"+\
                           "emy_exist"+"\n"+str(emy_exist)+"\n"+"\n"+\
                           "stage"+"\n"+str(stage)+"\n"+"\n"+\
                           "rec"+"\n"+str(rec)+"\n"+"\n"+\
                           "attack_item"+"\n"+str(attack_item)+"\n"+"\n"+\
                           "item_x"+"\n"+str(item_x)+"\n"+"\n"+\
                           "item_y"+"\n"+str(item_y)+"\n"+"\n"+\
                           "item_str"+"\n"+str(item_str)+"\n"+"\n"+\
                           "recovery_item"+"\n"+str(recovery_item)+"\n"+"\n"+\
                           "emy_recovery"+"\n"+str(emy_recovery))
                file.close()
                # セーブデータを上書き（attack_item_listリスト）
                f = open("data/data"+str(save_data)+"/save_data_attack_item_list"+str(save_data)+".txt", 'w')
                for i in attack_item_list:
                    f.write(str(i) + "\n")
                f.close()
                # セーブデータを上書き（mazeリスト）
                file_list = open("data/data"+str(save_data)+"/save_data_maze_list"+str(save_data)+".txt", 'w')
                file_list.write("22\n")
                file_list.close()
                file_list = open("data/data"+str(save_data)+"/save_data_maze_list"+str(save_data)+".txt", 'a')
                for row in (maze):
                    file_list.write(" ".join(map(str, row)) + "\n") 
                file_list.close()
                # セーブデータを上書き（map_moveリスト）
                file_list = open("data/data"+str(save_data)+"/save_data_map_move_list"+str(save_data)+".txt", 'w')
                file_list.write("22\n")
                file_list.close()
                file_list = open("data/data"+str(save_data)+"/save_data_map_move_list"+str(save_data)+".txt", 'a')
                for row in (map_move):
                    file_list.write(" ".join(map(str, row)) + "\n") 
                file_list.close()
            if tmr == 6:
                idx = 15
                tmr = 15
        
        elif idx == 12: # プレイヤーの移動
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            mycharacter[0].move_range_draw(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            draw_text(screen, "Stage "+str(stage), 390, 40, font, WHITE)
            mycharacter[0].move_player(key)
            if tmr >= 5:
                if key[K_RETURN] == 1 and pl_xs == 0 and pl_ys == 0:
                    if emy_exist == 1:
                        if (pl_x == emy_x and pl_y == emy_y-1) or \
                           (pl_x == emy_x and pl_y == emy_y+1) or \
                           (pl_y == emy_y and pl_x == emy_x-1) or \
                           (pl_y == emy_y and pl_x == emy_x+1): # 敵が隣接している
                            btl_cmd = 2
                    if maze[pl_y][pl_x] == 1:
                        btl_cmd = 0
                    idx = 2
                    tmr = 0
                if key[K_b] == 1: # 戻る
                    se[4].play()
                    se[4].set_volume(0.1*volume)
                    pl_x = pl_x_tmp
                    pl_y = pl_y_tmp
                    pl_d = pl_d_tmp
                    pl_a = pl_a_tmp
                    pl_xs = 0
                    pl_ys = 0
                    pl_mov = 3
                    idx = 1
            draw_text(screen, "[B]戻る", 740, 660, fontS, WHITE)
            draw_text(screen, "残移動数{}".format(pl_mov), 50, 660, fontS, WHITE) 
                
        elif idx == 2: # プレイヤーのコマンド入力と表示
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            mycharacter[0].move_range_draw(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            draw_text(screen, "Stage "+str(stage), 390, 40, font, WHITE)
            if tmr >= 5:
                if maze[pl_y][pl_x] == 1:
                    if recovery_item == 0: #C, W
                        screen.fill((51,51,204), (700,300,150,140))
                        pygame.draw.rect(screen, BLACK, (700,300,150,140), width=1)
                    else: #C, I, W
                        screen.fill((51,51,204), (700,300,150,200))
                        pygame.draw.rect(screen, BLACK, (700,300,150,200), width=1)
                if emy_exist == 1:
                    if (pl_x == emy_x and pl_y == emy_y-1) or \
                       (pl_x == emy_x and pl_y == emy_y+1) or \
                       (pl_y == emy_y and pl_x == emy_x-1) or \
                       (pl_y == emy_y and pl_x == emy_x+1): # 敵が隣接している
                        if attack_item > 0 or recovery_item > 0: #A, I, W
                            screen.fill((51,51,204), (700,300,150,200))
                            pygame.draw.rect(screen, BLACK, (700,300,150,200), width=1)
                        else: #A, W
                            screen.fill((51,51,204), (700,300,150,140))
                            pygame.draw.rect(screen, BLACK, (700,300,150,140), width=1)
                if maze[pl_y][pl_x] != 1:
                    if (emy_exist == 1 and \
                       not(pl_x == emy_x and pl_y == emy_y-1) and \
                       not(pl_x == emy_x and pl_y == emy_y+1) and \
                       not(pl_y == emy_y and pl_x == emy_x-1) and \
                       not(pl_y == emy_y and pl_x == emy_x+1)) or \
                       emy_exist != 1:
                        if recovery_item == 0: #W
                            screen.fill((51,51,204), (700,300,150,80))
                            pygame.draw.rect(screen, BLACK, (700,300,150,80), width=1)
                        else: #I, W
                            screen.fill((51,51,204), (700,300,150,140))
                            pygame.draw.rect(screen, BLACK, (700,300,150,140), width=1)
                if mycharacter[0].player_command(screen, font, key) == True:
                    if btl_cmd == 0:
                        pygame.mixer.music.load("sound/clear.ogg")
                        pygame.mixer.music.play(-1)
                        pygame.mixer.music.set_volume(0.05*volume)
                        idx = 8 # クリア
                        tmr = 0
                    if btl_cmd == 2:
                        se[2].play()
                        se[2].set_volume(0.1*volume)
                        idx = 10 #戦闘
                        tmr = 0
                    if btl_cmd == 4:
                        se[3].play()
                        se[3].set_volume(0.1*volume)
                        if (emy_exist == 1 and \
                           ((pl_x == emy_x and pl_y == emy_y-1) or \
                            (pl_x == emy_x and pl_y == emy_y+1) or \
                            (pl_y == emy_y and pl_x == emy_x-1) or \
                            (pl_y == emy_y and pl_x == emy_x+1))) and \
                            recovery_item == 0:
                            item_choice_cmd = 1
                        else:
                            item_choice_cmd = 0
                        idx = 21 #アイテム選択
                        tmr = 0
                    if btl_cmd == 6:
                        if maze[pl_y][pl_x] == 2: # 爆弾に載った
                            se[5].play()
                            se[5].set_volume(0.1*volume)
                            item_get = 15
                            attack_item += 1
                            attack_item_list[stage-1] += 1
                            maze[pl_y][pl_x] = 0
                            idx = 13 # アイテムゲット
                            tmr = 0
                        else:
                            if emy_exist == 1:
                                se[3].play()
                                se[3].set_volume(0.1*volume)
                                maze[emy_y][emy_x] = 0
                                map_move[emy_y][emy_x] = 0
                                emy_turn = 15
                                emy_mov = emy_movmax
                                idx = 3 #待機（敵のターン）
                                tmr = 0
                            else:
                                se[3].play()
                                se[3].set_volume(0.1*volume)
                                pl_mov = pl_movmax
                                pl_x_tmp = pl_x
                                pl_y_tmp = pl_y
                                pl_d_tmp = pl_d
                                pl_a_tmp = pl_a
                                pl_turn = 15
                                idx = 1
                                tmr = 0
                if key[K_b] == 1: # 戻る
                    se[4].play()
                    se[4].set_volume(0.1*volume)
                    pl_x = pl_x_tmp
                    pl_y = pl_y_tmp
                    pl_d = pl_d_tmp
                    pl_a = pl_a_tmp
                    pl_xs = 0
                    pl_ys = 0
                    pl_mov = 3
                    idx = 1
            draw_text(screen, "[B]戻る", 740, 660, fontS, WHITE)
            
        elif idx == 21: # アイテムのコマンド入力と表示
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            mycharacter[0].move_range_draw(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            draw_text(screen, "Stage "+str(stage), 390, 40, font, WHITE)
            if tmr >= 5:
                if emy_exist == 1 and \
                ((pl_x == emy_x and pl_y == emy_y-1) or \
                (pl_x == emy_x and pl_y == emy_y+1) or \
                (pl_y == emy_y and pl_x == emy_x-1) or \
                (pl_y == emy_y and pl_x == emy_x+1)) and \
                attack_item > 0 and recovery_item > 0:
                # 敵が隣接していて、回復アイテム残っている
                    screen.fill((51,51,204), (700,300,150,140))
                    pygame.draw.rect(screen, BLACK, (700,300,150,140), width=1)
                else:
                    screen.fill((51,51,204), (700,300,150,80))
                    pygame.draw.rect(screen, BLACK, (700,300,150,80), width=1)
                if item_collection[stage-1].item_choice_command(screen, font, key) == True:
                    if item_choice_cmd == 0:
                        se[3].play()
                        se[3].set_volume(0.1*volume)
                        recovery_time = 15
                        idx = 22 #回復選択
                        tmr = 0
                    if item_choice_cmd == 1:
                        se[3].play()
                        se[3].set_volume(0.1*volume)
                        idx = 14 #爆弾選択
                        tmr = 0
                if key[K_b] == 1: # 戻る
                    se[4].play()
                    se[4].set_volume(0.1*volume)
                    idx = 2
                    tmr = 0
                    
        elif idx == 14: # 爆弾のコマンド入力と表示
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            mycharacter[0].move_range_draw(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            draw_text(screen, "Stage "+str(stage), 390, 40, font, WHITE)
            if tmr >= 5:
                screen.fill((51,51,204), (700,300,150,320))
                pygame.draw.rect(screen, BLACK, (700,300,150,320), width=1)
                if item_collection[stage-1].item_command(screen, font, key) == True:
                    if item_cmd == 0 and attack_item_list[0] >= 1:
                        se[2].play()
                        se[2].set_volume(0.1*volume)
                        attack_item_list[0] -= 1
                        attack_item -= 1
                        item_collection[0].item_init()
                        idx = 10 #戦闘(爆弾)
                        tmr = 0
                    if item_cmd == 2 and attack_item_list[1] >= 1:
                        se[2].play()
                        se[2].set_volume(0.1*volume)
                        attack_item_list[1] -= 1
                        attack_item -= 1
                        item_collection[1].item_init()
                        idx = 10 #戦闘(爆弾)
                        tmr = 0
                    if item_cmd == 6 and attack_item_list[2] >= 1:
                        se[2].play()
                        se[2].set_volume(0.1*volume)
                        attack_item_list[2] -= 1
                        attack_item -= 1
                        item_collection[2].item_init()
                        idx = 10 #戦闘(爆弾)
                        tmr = 0
                    if item_cmd == 10 and attack_item_list[3] >= 1:
                        se[2].play()
                        se[2].set_volume(0.1*volume)
                        attack_item_list[3] -= 1
                        attack_item -= 1
                        item_collection[3].item_init()
                        idx = 10 #戦闘(爆弾)
                        tmr = 0
                    if item_cmd == 12 and attack_item_list[4] >= 1:
                        se[2].play()
                        se[2].set_volume(0.1*volume)
                        attack_item_list[4] -= 1
                        attack_item -= 1
                        item_collection[4].item_init()
                        idx = 10 #戦闘(爆弾)
                        tmr = 0
                if key[K_b] == 1: # 戻る
                    se[4].play()
                    se[4].set_volume(0.1*volume)
                    idx = 21
                    tmr = 0
                    
        elif idx == 13: # 爆弾ゲット
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            if item_get > 0:
                item_get -= 1
                draw_text(screen, "爆弾ゲット", \
                          350, 180, font, CYAN)
            if tmr == 20:
                if emy_exist == 1:
                    maze[emy_y][emy_x] = 0
                    map_move[emy_y][emy_x] = 0
                    emy_turn = 15
                    emy_mov = emy_movmax
                    idx = 3 #待機（敵のターン）
                    tmr = 0
                else:
                    pl_mov = pl_movmax
                    pl_x_tmp = pl_x
                    pl_y_tmp = pl_y
                    pl_d_tmp = pl_d
                    pl_a_tmp = pl_a
                    pl_turn = 15
                    idx = 1
                    tmr = 0
                    
        elif idx == 22: # 回復処理
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            if recovery_time > 0:
                recovery_time -= 1
                draw_text(screen, "プレイヤー回復", \
                          340, 180, font, CYAN)
            if tmr == 1:
                se[6].play()
                se[6].set_volume(0.1*volume)
                pl_life = pl_lifemax
                recovery_item -= 1
            if tmr >= 2 and tmr <= 15:
                rec_X = (pl_x-4)*62.85+(62.85-40)/2
                rec_Y = (pl_y-4)*65.45
                img_s2 = pygame.transform.scale(imgRecovery, [50, 50])
                screen.blit(img_s2, [rec_X+random.randint(-30,30), \
                                    rec_Y+random.randint(-30,30)])
            if tmr == 20:
                if emy_exist == 1:
                    maze[emy_y][emy_x] = 0
                    map_move[emy_y][emy_x] = 0
                    emy_turn = 15
                    emy_mov = emy_movmax
                    idx = 3 #待機（敵のターン）
                    tmr = 0
                else:
                    pl_mov = pl_movmax
                    pl_x_tmp = pl_x
                    pl_y_tmp = pl_y
                    pl_d_tmp = pl_d
                    pl_a_tmp = pl_a
                    pl_turn = 15
                    idx = 1
                    tmr = 0
                    
        elif idx == 23: # 敵の回復処理
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            if recovery_time > 0:
                recovery_time -= 1
                draw_text(screen, "敵の回復", \
                          340, 180, font, CYAN)
            if tmr == 1:
                se[6].play()
                se[6].set_volume(0.1*volume)
                emy_life += int(emy_lifemax/2)
                emy_recovery -= 1
            if tmr >= 2 and tmr <= 15:
                rec_emyX = (emy_x-4)*62.85+(62.85-40)/2
                rec_emyY = (emy_y-4)*65.45
                img_s2 = pygame.transform.scale(imgRecovery, [50, 50])
                screen.blit(img_s2, [rec_emyX+random.randint(-30,30), \
                                    rec_emyY+random.randint(-30,30)])
            if tmr == 20:
                maze[pl_y][pl_x] = 0
                pl_x_tmp = pl_x
                pl_y_tmp = pl_y
                pl_d_tmp = pl_d
                pl_a_tmp = pl_a
                pl_mov = pl_movmax
                pl_turn = 15
                idx = 1
                tmr = 0
                
        elif idx == 3: # 敵のターン
            rec = rec + 1/(4+2*speed)
            if tmr == 1:
                maze[pl_y][pl_x] = 9 # プレイヤーが壁
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            clear_field(screen)
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            emycharacter[stage-1].draw_enemy(screen)
            mycharacter[0].draw_player(screen, tmr)
            emycharacter[stage-1].move_enemy(key)
            if emy_turn > 0:
                emy_turn = emy_turn - 1
                draw_text(screen, "敵のターン", 300, 180, font, RED)
            
        elif idx == 4: # 戦闘開始（先制攻撃）
            rec = rec + 1/(4+2*speed)
            draw_battle(screen)
            mycharacter[0].draw_battle_player(screen, tmr) # 主人公を表示
            emycharacter[stage-1].draw_battle_enemy(screen) # 敵を表示
            mycharacter[0].draw_para(screen, font) # 主人公の能力を表示
            emycharacter[stage-1].draw_para_enemy(screen, font) # 敵の能力を表示
            # プレイヤーの攻撃
            if tmr == 6:
                if btl_cmd == 2:
                    dmg = pl_str
                if btl_cmd == 4:
                    dmg = item_str
                pl_step = 30
            if btl_cmd == 4:
                if tmr >= 6 and tmr <= 11:
                    if item_cmd == 0:
                        item_collection[0].item_slow(screen, tmr)
                    if item_cmd == 2:
                        item_collection[1].item_slow(screen, tmr)
                    if item_cmd == 6:
                        item_collection[2].item_slow(screen, tmr)
                    if item_cmd == 10:
                        item_collection[3].item_slow(screen, tmr)
                    if item_cmd == 12:
                        item_collection[4].item_slow(screen, tmr)
            if 12 <= tmr and tmr <= 14:
                if btl_cmd == 4:
                    screen.blit(imgEffect, [580+random.randint(-50,50), \
                                            230+random.randint(-50,50)])
                screen.blit(imgEffect, [840-tmr*20, -1330+tmr*120])
            if tmr == 13:
                if btl_cmd == 2:
                    se[0].play()
                    se[0].set_volume(0.20*volume)
                if btl_cmd == 4:
                    se[1].play()
                    se[1].set_volume(0.25*volume)
            if tmr == 15:
                emy_blink = 5
            if tmr == 21:
                pl_step = 0
                emy_life = emy_life - dmg
                if emy_life <= 0:
                    emy_life = 0
                    emy_exist = 0
            if tmr == 26:
                if emy_exist == 0:
                    maze[emy_y][emy_x] = 0
                    maze[pl_y][pl_x] = 0
                    pl_mov = pl_movmax
                    if pl_x == emy_x and pl_y == emy_y-1:
                        pl_d = 0
                    if pl_x == emy_x and pl_y == emy_y+1:
                        pl_d = 1
                    if pl_y == emy_y and pl_x == emy_x-1:
                        pl_d = 3
                    if pl_y == emy_y and pl_x == emy_x+1:
                        pl_d = 2
                    pl_a = pl_d*4
                    pl_x_tmp = pl_x
                    pl_y_tmp = pl_y
                    pl_d_tmp = pl_d
                    pl_a_tmp = pl_a
                    pl_turn = 15
                    idx = 9
                    tmr = 0
                else: # 敵の攻撃
                    dmg = emy_str
                    emy_step = 30
            if 31 <= tmr and tmr <= 33:
                screen.blit(imgEffect, [760-tmr*20, -3580+tmr*120])
            if tmr == 32:
                se[0].play()
                se[0].set_volume(0.20*volume)
            if tmr == 38:
                dmg = emy_str
                dmg_eff = 5
                emy_step = 0
            if tmr == 42:
                pl_life = pl_life - dmg
                if pl_life <= 0:
                    pl_life = 0
                    idx = 6 # 敗北
                    tmr = 0
            if tmr == 49:
                if emy_exist == 1:
                    maze[emy_y][emy_x] = 0
                    emy_turn = 15
                    emy_mov = emy_movmax
                    if pl_x == emy_x and pl_y == emy_y-1:
                        pl_d = 0
                    if pl_x == emy_x and pl_y == emy_y+1:
                        pl_d = 1
                    if pl_y == emy_y and pl_x == emy_x-1:
                        pl_d = 3
                    if pl_y == emy_y and pl_x == emy_x+1:
                        pl_d = 2
                    pl_a = pl_d*4
                    pl_d_tmp = pl_d
                    pl_a_tmp = pl_a
                    pygame.mixer.music.load("sound/field.ogg")
                    pygame.mixer.music.play(-1)
                    pygame.mixer.music.set_volume(0.05*volume)
                    idx = 3
                    tmr = 0
        
        elif idx == 5: # 戦闘開始（後攻攻撃）
            rec = rec + 1/(4+2*speed)
            draw_battle(screen)
            mycharacter[0].draw_battle_player(screen, tmr) # 主人公を表示
            emycharacter[stage-1].draw_battle_enemy(screen) # 敵を表示
            mycharacter[0].draw_para(screen, font) # 主人公の能力を表示
            emycharacter[stage-1].draw_para_enemy(screen, font) # 敵の能力を表示
            # 敵の攻撃
            if tmr == 6:
                dmg = emy_str
                emy_step = 30
            if 12 <= tmr and tmr <= 14:
                screen.blit(imgEffect, [380-tmr*20, -1300+tmr*120])
            if tmr == 13:
                se[0].play()
                se[0].set_volume(0.20*volume)
            if tmr == 15:
                dmg = emy_str
                dmg_eff = 5
                emy_step = 0
            if tmr == 21:
                pl_life = pl_life - dmg
                if pl_life <= 0:
                    pl_life = 0
                    idx = 6 # 敗北
                    tmr = 0
            # プレイヤーの攻撃
            if tmr == 25:
                dmg = pl_str
                pl_step = 30
            if 31 <= tmr and tmr <= 33:
                screen.blit(imgEffect, [1220-tmr*20, -3610+tmr*120])
            if tmr == 32:
                se[0].play()
                se[0].set_volume(0.20*volume)
            if tmr == 34:
                emy_blink = 5
            if tmr == 40:
                pl_step = 0
                emy_life = emy_life - dmg
                if emy_life <= 0:
                    emy_life = 0
                    emy_exist = 0
                    maze[emy_y][emy_x] = 0
            if tmr == 45:
                maze[pl_y][pl_x] = 0
                pl_mov = pl_movmax
                if pl_x == emy_x and pl_y == emy_y-1:
                    pl_d = 0
                if pl_x == emy_x and pl_y == emy_y+1:
                    pl_d = 1
                if pl_y == emy_y and pl_x == emy_x-1:
                    pl_d = 3
                if pl_y == emy_y and pl_x == emy_x+1:
                    pl_d = 2
                pl_a = pl_d*4
                pl_x_tmp = pl_x
                pl_y_tmp = pl_y
                pl_d_tmp = pl_d
                pl_a_tmp = pl_a
                pl_turn = 15
                idx = 9
                tmr = 0
                
        elif idx == 6: # 敗北
            draw_battle(screen)
            mycharacter[0].draw_battle_player(screen, tmr) # 主人公を表示
            emycharacter[stage-1].draw_battle_enemy(screen) # 敵を表示
            mycharacter[0].draw_para(screen, font) # 主人公の能力を表示
            emycharacter[stage-1].draw_para_enemy(screen, font) # 敵の能力を表示
            if tmr == 1:
                pygame.mixer.music.stop()
            if tmr == 11:
                idx = 7
                tmr = 29
                
        elif idx == 7: # ゲームオーバー
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            if tmr <= 40:
                PL_TURN = [0, 8, 4, 12]
                pl_a = PL_TURN[tmr%4]
                mycharacter[0].draw_player(screen, tmr)
            if tmr >= 41 and tmr <= 60:
                pl_a = 16 # 倒れた絵
                mycharacter[0].draw_player(screen, tmr)
            if tmr >= 51 and tmr <= 119:
                draw_text(screen, "You died.", 360, 240, font, RED)
                draw_text(screen, "Game over.", 360, 380, font, RED)
            if tmr == 120:
                maze[emy_y][emy_x] = 0
                map_move[emy_y][emy_x] = 0
                story = 0
                stage = 1
                data_choice = 0
                continue_data = 0
                title_choice = 0
                idx = 20
                tmr = 0
                
        elif idx == 8: # クリア画面
            rec = rec + 1/(4+2*speed)
            img_s = pygame.transform.scale(imgField, [1020, 828])
            screen.blit(img_s, [-23, -30])
            for iy in range(19):
                for ix in range(22):
                    if maze[iy][ix] == 2: # 爆弾を描く
                        item_collection[stage-1].item_draw(screen)
            mycharacter[0].draw_player(screen, tmr)
            if emy_exist == 1:
                emycharacter[stage-1].draw_enemy(screen)
            if stage <= 4:
                draw_text(screen, "Stage"+str(stage)+" clear.", \
                          360, 240, font, CYAN)
            else:
                draw_text(screen, "Game clear.", 360, 240, font, CYAN)
            if tmr == 100:
                if stage < 5:
                    mycharacter[0].postion_player()
                    pl_lifemax = 100
                    pl_life = pl_lifemax
                    pl_str = 20
                    pl_x_tmp = pl_x
                    pl_y_tmp = pl_y
                    pl_d_tmp = pl_d
                    pl_a_tmp = pl_a
                    pl_movmax = 3
                    pl_mov = pl_movmax
                    emy_exist = 1
                    pl_turn = 15
                    stage += 1
                    emycharacter[stage-1].init_enemy()
                    item_collection[stage-1].item_init()
                    maze[item_y][item_x] = 2
                    #if stage >= 3:
                    #    maze[item_y+5][item_x-4] = 2
                    if stage == 3:
                        maze = [
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 2, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
                        ]
                    if stage == 4:
                        maze = [
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 9, 1, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 0, 9, 9, 0, 0, 0, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 0, 0, 0, 9, 9, 9, 9, 0, 0, 0, 0, 2, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
                        ]
                    if stage == 5:
                        maze = [
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 2, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 2, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
                            [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
                        ]
                    story = 1
                    idx = 18
                    tmr = 0
                    pygame.mixer.music.stop()
                else:
                    story = 1
                    stage = 6
                    idx = 18
                    tmr = 0
                    pygame.mixer.music.load("sound/ending.ogg")
                    pygame.mixer.music.play(-1)
                    pygame.mixer.music.set_volume(0.05*volume)
            
        elif idx == 9: # 画面切り替え（➔フィールド）
            rec = rec + 1/(4+2*speed)
            if tmr == 1:
                pygame.mixer.music.load("sound/field.ogg")
                pygame.mixer.music.play(-1)
                pygame.mixer.music.set_volume(0.05*volume)
            if 1 <= tmr and tmr <= 8:
                h = 80*tmr
                pygame.draw.rect(screen, BLACK, [0, 0, 880, h])
                pygame.draw.rect(screen, BLACK, [0, 720-h, 880, h])
            if tmr >= 10:
                img_s = pygame.transform.scale(imgField, [1020, 828])
                screen.blit(img_s, [-23, -30])
                mycharacter[0].draw_player(screen, tmr)
                if emy_exist == 1:
                    emycharacter[stage-1].draw_enemy(screen)
            if 10 <= tmr and tmr <= 14:
                h = 80*(14-tmr)
                pygame.draw.rect(screen, BLACK, [0, 0, 880, h])
                pygame.draw.rect(screen, BLACK, [0, 720-h, 880, h])
            if tmr == 14:
                idx = 1
                tmr = 0
                
        elif idx == 10: # 画面切り替え（➔戦闘開始（先制攻撃））
            rec = rec + 1/(4+2*speed)
            if 1 <= tmr and tmr <= 8:
                h = 80*tmr
                pygame.draw.rect(screen, BLACK, [0, 0, 880, h])
                pygame.draw.rect(screen, BLACK, [0, 720-h, 880, h])
            if tmr >= 10:
                draw_battle(screen)
                mycharacter[0].draw_battle_player(screen, tmr) # 主人公を表示
                emycharacter[stage-1].draw_battle_enemy(screen) # 敵を表示
                mycharacter[0].draw_para(screen, font) # 主人公の能力を表示
                emycharacter[stage-1].draw_para_enemy(screen, font) # 敵の能力を表示
            if 10 <= tmr and tmr <= 14:
                h = 80*(14-tmr)
                pygame.draw.rect(screen, BLACK, [0, 0, 880, h])
                pygame.draw.rect(screen, BLACK, [0, 720-h, 880, h])
            if tmr == 14:
                pygame.mixer.music.load("sound/battle.ogg")
                pygame.mixer.music.play(-1)
                pygame.mixer.music.set_volume(0.03*volume)
                idx = 4
                tmr = 0
                
        elif idx == 11: # 画面切り替え（➔戦闘開始（後攻攻撃））
            rec = rec + 1/(4+2*speed)
            if 1 <= tmr and tmr <= 8:
                h = 80*tmr
                pygame.draw.rect(screen, BLACK, [0, 0, 880, h])
                pygame.draw.rect(screen, BLACK, [0, 720-h, 880, h])
            if tmr >= 10:
                draw_battle(screen)
                mycharacter[0].draw_battle_player(screen, tmr) # 主人公を表示
                emycharacter[stage-1].draw_battle_enemy(screen) # 敵を表示
                mycharacter[0].draw_para(screen, font) # 主人公の能力を表示
                emycharacter[stage-1].draw_para_enemy(screen, font) # 敵の能力を表示
            if 10 <= tmr and tmr <= 14:
                h = 80*(14-tmr)
                pygame.draw.rect(screen, BLACK, [0, 0, 880, h])
                pygame.draw.rect(screen, BLACK, [0, 720-h, 880, h])
            if tmr == 14:
                pygame.mixer.music.load("sound/battle.ogg")
                pygame.mixer.music.play(-1)
                pygame.mixer.music.set_volume(0.03*volume)
                idx = 5
                tmr = 0
                
        elif idx == 20: # 画面切り替え（➔タイトル画面）
            if 1 <= tmr and tmr <= 8:
                h = 80*tmr
                pygame.draw.rect(screen, BLACK, [0, 0, 880, h])
                pygame.draw.rect(screen, BLACK, [0, 720-h, 880, h])
            if tmr >= 10:
                img_s = pygame.transform.scale(imgTitle, [1045, 810])
                screen.blit(img_s, [-24, -27])
                if x == -300:
                    lr = 1
                if x == 900:
                    lr = -1
                x += lr*20
                img_s2 = pygame.transform.scale(imgPlayer[10+lr*2+(int(tmr/2)%4)], [120, 180])
                screen.blit(img_s2, [100+x, 300])
            if 10 <= tmr and tmr <= 14:
                h = 80*(14-tmr)
                pygame.draw.rect(screen, BLACK, [0, 0, 880, h])
                pygame.draw.rect(screen, BLACK, [0, 720-h, 880, h])
            if tmr == 14:
                titleback_cmd = 1
                pygame.mixer.music.load("sound/start.ogg")
                pygame.mixer.music.play(-1)
                pygame.mixer.music.set_volume(0.05*volume)
                idx = 0
                tmr = 0
          
        pygame.draw.rect(screen, BLACK, [0, 720, 1200, 300])
        pygame.draw.rect(screen, BLACK, [880, 0, 400, 1000])
        draw_text(screen, "[S]peed "+str(speed), 740, 40, fontS, WHITE)
        draw_text(screen, "[V]olume "+str(volume), 50, 40, fontS, WHITE)
        
        pygame.display.update()
        clock.tick(4+2*speed)

mycharacter = [
    MyCharacter("image/player/player"+str(pl_a)+".png", pl_x, pl_y, pl_d, pl_a, \
                pl_lifemax, pl_str, pl_movmax)
]
    
emycharacter = [
    EnemyCharacter("image/enemy/enemy0.png", "猫1", 80, 15, 3, \
                   15, 6, 1),
    EnemyCharacter("image/enemy/enemy1.png", "猫2", 100, 20, 3, \
                   15, 6, 1),
    EnemyCharacter("image/enemy/enemy2.png", "猫3", 120, 25, 3, \
                   15, 6, 1),
    EnemyCharacter("image/enemy/enemy3.png", "猫4", 140, 30, 3, \
                   15, 6, 1),
    EnemyCharacter("image/enemy/enemy4.png", "猫5", 160, 35, 3, \
                   15, 6, 1)
]

item_collection = [
    ItemCollection("image/item/attack_item0.png", 15, 8, 50),
    ItemCollection("image/item/attack_item1.png", 15, 8, 65),
    ItemCollection("image/item/attack_item2.png", 15, 8, 80),
    ItemCollection("image/item/attack_item3.png", 15, 8, 95),
    ItemCollection("image/item/attack_item4.png", 15, 8, 110)
]

if __name__ == '__main__':
    main()
